// ---- DON'T EDIT! THIS IS AUTO GENERATED CODE ---- //
use crate::lexers::Token;

pub fn get_keyword_token(identifier: &Vec<char>) -> Result<Token, String> {
    let id: String = identifier.into_iter().collect();
    match &id[..] {
        "null" => Ok(Token::CONSTANT(identifier.clone())),
        "true" => Ok(Token::CONSTANT(identifier.clone())),
        "false" => Ok(Token::CONSTANT(identifier.clone())),
        "String" => Ok(Token::CONSTANT(identifier.clone())),
        "Widget" => Ok(Token::CONSTANT(identifier.clone())),
        "Future" => Ok(Token::CONSTANT(identifier.clone())),
        "Object" => Ok(Token::CONSTANT(identifier.clone())),
        "abstract" => Ok(Token::KEYWORD(identifier.clone())),
        "else" => Ok(Token::KEYWORD(identifier.clone())),
        "import" => Ok(Token::KEYWORD(identifier.clone())),
        "super" => Ok(Token::KEYWORD(identifier.clone())),
        "as" => Ok(Token::KEYWORD(identifier.clone())),
        "enum" => Ok(Token::KEYWORD(identifier.clone())),
        "in" => Ok(Token::KEYWORD(identifier.clone())),
        "switch" => Ok(Token::KEYWORD(identifier.clone())),
        "assert" => Ok(Token::KEYWORD(identifier.clone())),
        "export" => Ok(Token::KEYWORD(identifier.clone())),
        "interface" => Ok(Token::KEYWORD(identifier.clone())),
        "sync" => Ok(Token::KEYWORD(identifier.clone())),
        "async" => Ok(Token::KEYWORD(identifier.clone())),
        "extends" => Ok(Token::KEYWORD(identifier.clone())),
        "is" => Ok(Token::KEYWORD(identifier.clone())),
        "this" => Ok(Token::KEYWORD(identifier.clone())),
        "await" => Ok(Token::KEYWORD(identifier.clone())),
        "extension" => Ok(Token::KEYWORD(identifier.clone())),
        "library" => Ok(Token::KEYWORD(identifier.clone())),
        "throw" => Ok(Token::KEYWORD(identifier.clone())),
        "external" => Ok(Token::KEYWORD(identifier.clone())),
        "mixin" => Ok(Token::KEYWORD(identifier.clone())),
        "case" => Ok(Token::KEYWORD(identifier.clone())),
        "factory" => Ok(Token::KEYWORD(identifier.clone())),
        "new" => Ok(Token::KEYWORD(identifier.clone())),
        "try" => Ok(Token::KEYWORD(identifier.clone())),
        "class" => Ok(Token::KEYWORD(identifier.clone())),
        "final" => Ok(Token::KEYWORD(identifier.clone())),
        "catch" => Ok(Token::KEYWORD(identifier.clone())),
        "typedef" => Ok(Token::KEYWORD(identifier.clone())),
        "on" => Ok(Token::KEYWORD(identifier.clone())),
        "var" => Ok(Token::KEYWORD(identifier.clone())),
        "const" => Ok(Token::KEYWORD(identifier.clone())),
        "finally" => Ok(Token::KEYWORD(identifier.clone())),
        "operator" => Ok(Token::KEYWORD(identifier.clone())),
        "void" => Ok(Token::KEYWORD(identifier.clone())),
        "continue" => Ok(Token::KEYWORD(identifier.clone())),
        "for" => Ok(Token::KEYWORD(identifier.clone())),
        "part" => Ok(Token::KEYWORD(identifier.clone())),
        "while" => Ok(Token::KEYWORD(identifier.clone())),
        "covariant" => Ok(Token::KEYWORD(identifier.clone())),
        "Function" => Ok(Token::KEYWORD(identifier.clone())),
        "rethrow" => Ok(Token::KEYWORD(identifier.clone())),
        "with" => Ok(Token::KEYWORD(identifier.clone())),
        "default" => Ok(Token::KEYWORD(identifier.clone())),
        "get" => Ok(Token::KEYWORD(identifier.clone())),
        "return" => Ok(Token::KEYWORD(identifier.clone())),
        "yield" => Ok(Token::KEYWORD(identifier.clone())),
        "deferred" => Ok(Token::KEYWORD(identifier.clone())),
        "hide" => Ok(Token::KEYWORD(identifier.clone())),
        "set" => Ok(Token::KEYWORD(identifier.clone())),
        "do" => Ok(Token::KEYWORD(identifier.clone())),
        "if" => Ok(Token::KEYWORD(identifier.clone())),
        "show" => Ok(Token::KEYWORD(identifier.clone())),
        "dynamic" => Ok(Token::KEYWORD(identifier.clone())),
        "implements" => Ok(Token::KEYWORD(identifier.clone())),
        "static" => Ok(Token::KEYWORD(identifier.clone())),
        "late" => Ok(Token::KEYWORD(identifier.clone())),
        "break" => Ok(Token::KEYWORD(identifier.clone())),
        _ => Err(String::from("Not a keyword")),
    }
}
