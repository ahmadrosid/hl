// ---- DON'T EDIT! THIS IS AUTO GENERATED CODE ---- //
use crate::lexers::Token;

pub fn get_keyword_token(identifier: &Vec<char>) -> Result<Token, String> {
    let id: String = identifier.into_iter().collect();
    match &id[..] {
        "null" => Ok(Token::CONSTANT(identifier.clone())),
        "true" => Ok(Token::CONSTANT(identifier.clone())),
        "false" => Ok(Token::CONSTANT(identifier.clone())),
        "this" => Ok(Token::CONSTANT(identifier.clone())),
        "Any" => Ok(Token::CONSTANT(identifier.clone())),
        "Array" => Ok(Token::CONSTANT(identifier.clone())),
        "Boolean" => Ok(Token::CONSTANT(identifier.clone())),
        "Double" => Ok(Token::CONSTANT(identifier.clone())),
        "Long" => Ok(Token::CONSTANT(identifier.clone())),
        "Int" => Ok(Token::CONSTANT(identifier.clone())),
        "String" => Ok(Token::CONSTANT(identifier.clone())),
        "Short" => Ok(Token::CONSTANT(identifier.clone())),
        "Lazy" => Ok(Token::CONSTANT(identifier.clone())),
        "List" => Ok(Token::CONSTANT(identifier.clone())),
        "as" => Ok(Token::KEYWORD(identifier.clone())),
        "abstract" => Ok(Token::KEYWORD(identifier.clone())),
        "break" => Ok(Token::KEYWORD(identifier.clone())),
        "class" => Ok(Token::KEYWORD(identifier.clone())),
        "continue" => Ok(Token::KEYWORD(identifier.clone())),
        "companion" => Ok(Token::KEYWORD(identifier.clone())),
        "data" => Ok(Token::KEYWORD(identifier.clone())),
        "do" => Ok(Token::KEYWORD(identifier.clone())),
        "else" => Ok(Token::KEYWORD(identifier.clone())),
        "enum" => Ok(Token::KEYWORD(identifier.clone())),
        "external" => Ok(Token::KEYWORD(identifier.clone())),
        "expect" => Ok(Token::KEYWORD(identifier.clone())),
        "for" => Ok(Token::KEYWORD(identifier.clone())),
        "fun" => Ok(Token::KEYWORD(identifier.clone())),
        "if" => Ok(Token::KEYWORD(identifier.clone())),
        "in" => Ok(Token::KEYWORD(identifier.clone())),
        "internal" => Ok(Token::KEYWORD(identifier.clone())),
        "import" => Ok(Token::KEYWORD(identifier.clone())),
        "interface" => Ok(Token::KEYWORD(identifier.clone())),
        "inline" => Ok(Token::KEYWORD(identifier.clone())),
        "is" => Ok(Token::KEYWORD(identifier.clone())),
        "noinline" => Ok(Token::KEYWORD(identifier.clone())),
        "object" => Ok(Token::KEYWORD(identifier.clone())),
        "open" => Ok(Token::KEYWORD(identifier.clone())),
        "operator" => Ok(Token::KEYWORD(identifier.clone())),
        "override" => Ok(Token::KEYWORD(identifier.clone())),
        "package" => Ok(Token::KEYWORD(identifier.clone())),
        "public" => Ok(Token::KEYWORD(identifier.clone())),
        "private" => Ok(Token::KEYWORD(identifier.clone())),
        "return" => Ok(Token::KEYWORD(identifier.clone())),
        "super" => Ok(Token::KEYWORD(identifier.clone())),
        "set" => Ok(Token::KEYWORD(identifier.clone())),
        "get" => Ok(Token::KEYWORD(identifier.clone())),
        "throw" => Ok(Token::KEYWORD(identifier.clone())),
        "try" => Ok(Token::KEYWORD(identifier.clone())),
        "typealias" => Ok(Token::KEYWORD(identifier.clone())),
        "typeof" => Ok(Token::KEYWORD(identifier.clone())),
        "val" => Ok(Token::KEYWORD(identifier.clone())),
        "var" => Ok(Token::KEYWORD(identifier.clone())),
        "when" => Ok(Token::KEYWORD(identifier.clone())),
        "while" => Ok(Token::KEYWORD(identifier.clone())),
        _ => Err(String::from("Not a keyword")),
    }
}
