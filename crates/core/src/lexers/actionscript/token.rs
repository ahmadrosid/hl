// ---- DON'T EDIT! THIS IS AUTO GENERATED CODE ---- //
use crate::lexers::Token;

pub fn get_keyword_token(identifier: &Vec<char>) -> Result<Token, String> {
    let id: String = identifier.into_iter().collect();
    match &id[..] {
        "false" => Ok(Token::CONSTANT(identifier.clone())),
        "null" => Ok(Token::CONSTANT(identifier.clone())),
        "this" => Ok(Token::CONSTANT(identifier.clone())),
        "true" => Ok(Token::CONSTANT(identifier.clone())),
        "Math" => Ok(Token::CONSTANT(identifier.clone())),
        "uint" => Ok(Token::KEYWORD(identifier.clone())),
        "int" => Ok(Token::KEYWORD(identifier.clone())),
        "break" => Ok(Token::KEYWORD(identifier.clone())),
        "case" => Ok(Token::KEYWORD(identifier.clone())),
        "continue" => Ok(Token::KEYWORD(identifier.clone())),
        "default" => Ok(Token::KEYWORD(identifier.clone())),
        "do" => Ok(Token::KEYWORD(identifier.clone())),
        "else" => Ok(Token::KEYWORD(identifier.clone())),
        "for" => Ok(Token::KEYWORD(identifier.clone())),
        "if" => Ok(Token::KEYWORD(identifier.clone())),
        "in" => Ok(Token::KEYWORD(identifier.clone())),
        "import" => Ok(Token::KEYWORD(identifier.clone())),
        "label" => Ok(Token::KEYWORD(identifier.clone())),
        "return" => Ok(Token::KEYWORD(identifier.clone())),
        "super" => Ok(Token::KEYWORD(identifier.clone())),
        "switch" => Ok(Token::KEYWORD(identifier.clone())),
        "throw" => Ok(Token::KEYWORD(identifier.clone())),
        "try" => Ok(Token::KEYWORD(identifier.clone())),
        "while" => Ok(Token::KEYWORD(identifier.clone())),
        "with" => Ok(Token::KEYWORD(identifier.clone())),
        "dynamic" => Ok(Token::KEYWORD(identifier.clone())),
        "final" => Ok(Token::KEYWORD(identifier.clone())),
        "internal" => Ok(Token::KEYWORD(identifier.clone())),
        "native" => Ok(Token::KEYWORD(identifier.clone())),
        "override" => Ok(Token::KEYWORD(identifier.clone())),
        "private" => Ok(Token::KEYWORD(identifier.clone())),
        "protected" => Ok(Token::KEYWORD(identifier.clone())),
        "public" => Ok(Token::KEYWORD(identifier.clone())),
        "static" => Ok(Token::KEYWORD(identifier.clone())),
        "class" => Ok(Token::KEYWORD(identifier.clone())),
        "const" => Ok(Token::KEYWORD(identifier.clone())),
        "extends" => Ok(Token::KEYWORD(identifier.clone())),
        "function" => Ok(Token::KEYWORD(identifier.clone())),
        "get" => Ok(Token::KEYWORD(identifier.clone())),
        "implements" => Ok(Token::KEYWORD(identifier.clone())),
        "interface" => Ok(Token::KEYWORD(identifier.clone())),
        "namespace" => Ok(Token::KEYWORD(identifier.clone())),
        "package" => Ok(Token::KEYWORD(identifier.clone())),
        "set" => Ok(Token::KEYWORD(identifier.clone())),
        "var" => Ok(Token::KEYWORD(identifier.clone())),
        "new" => Ok(Token::KEYWORD(identifier.clone())),
        "void" => Ok(Token::KEYWORD(identifier.clone())),
        _ => Err(String::from("Not a keyword")),
    }
}
