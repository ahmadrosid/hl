// ---- DON'T EDIT! THIS IS AUTO GENERATED CODE ---- //
use crate::lexers::Token;

pub fn get_keyword_token(identifier: &Vec<char>) -> Result<Token, String> {
    let id: String = identifier.into_iter().collect();
    match &id[..] {
        "nil" => Ok(Token::CONSTANT(identifier.clone())),
        "true" => Ok(Token::CONSTANT(identifier.clone())),
        "false" => Ok(Token::CONSTANT(identifier.clone())),
        "addr" => Ok(Token::KEYWORD(identifier.clone())),
        "and" => Ok(Token::KEYWORD(identifier.clone())),
        "as" => Ok(Token::KEYWORD(identifier.clone())),
        "asm" => Ok(Token::KEYWORD(identifier.clone())),
        "bind" => Ok(Token::KEYWORD(identifier.clone())),
        "block" => Ok(Token::KEYWORD(identifier.clone())),
        "break" => Ok(Token::KEYWORD(identifier.clone())),
        "case" => Ok(Token::KEYWORD(identifier.clone())),
        "cast" => Ok(Token::KEYWORD(identifier.clone())),
        "concept" => Ok(Token::KEYWORD(identifier.clone())),
        "const" => Ok(Token::KEYWORD(identifier.clone())),
        "continue" => Ok(Token::KEYWORD(identifier.clone())),
        "converter" => Ok(Token::KEYWORD(identifier.clone())),
        "defer" => Ok(Token::KEYWORD(identifier.clone())),
        "discard" => Ok(Token::KEYWORD(identifier.clone())),
        "distinct" => Ok(Token::KEYWORD(identifier.clone())),
        "div" => Ok(Token::KEYWORD(identifier.clone())),
        "do" => Ok(Token::KEYWORD(identifier.clone())),
        "elif" => Ok(Token::KEYWORD(identifier.clone())),
        "else" => Ok(Token::KEYWORD(identifier.clone())),
        "echo" => Ok(Token::KEYWORD(identifier.clone())),
        "end" => Ok(Token::KEYWORD(identifier.clone())),
        "enum" => Ok(Token::KEYWORD(identifier.clone())),
        "except" => Ok(Token::KEYWORD(identifier.clone())),
        "export" => Ok(Token::KEYWORD(identifier.clone())),
        "finally" => Ok(Token::KEYWORD(identifier.clone())),
        "for" => Ok(Token::KEYWORD(identifier.clone())),
        "from" => Ok(Token::KEYWORD(identifier.clone())),
        "func" => Ok(Token::KEYWORD(identifier.clone())),
        "if" => Ok(Token::KEYWORD(identifier.clone())),
        "import" => Ok(Token::KEYWORD(identifier.clone())),
        "in" => Ok(Token::KEYWORD(identifier.clone())),
        "include" => Ok(Token::KEYWORD(identifier.clone())),
        "interface" => Ok(Token::KEYWORD(identifier.clone())),
        "is" => Ok(Token::KEYWORD(identifier.clone())),
        "isnot" => Ok(Token::KEYWORD(identifier.clone())),
        "iterator" => Ok(Token::KEYWORD(identifier.clone())),
        "let" => Ok(Token::KEYWORD(identifier.clone())),
        "macro" => Ok(Token::KEYWORD(identifier.clone())),
        "method" => Ok(Token::KEYWORD(identifier.clone())),
        "mixin" => Ok(Token::KEYWORD(identifier.clone())),
        "mod" => Ok(Token::KEYWORD(identifier.clone())),
        "not" => Ok(Token::KEYWORD(identifier.clone())),
        "notin" => Ok(Token::KEYWORD(identifier.clone())),
        "object" => Ok(Token::KEYWORD(identifier.clone())),
        "of" => Ok(Token::KEYWORD(identifier.clone())),
        "or" => Ok(Token::KEYWORD(identifier.clone())),
        "out" => Ok(Token::KEYWORD(identifier.clone())),
        "proc" => Ok(Token::KEYWORD(identifier.clone())),
        "ptr" => Ok(Token::KEYWORD(identifier.clone())),
        "raise" => Ok(Token::KEYWORD(identifier.clone())),
        "ref" => Ok(Token::KEYWORD(identifier.clone())),
        "return" => Ok(Token::KEYWORD(identifier.clone())),
        "shl" => Ok(Token::KEYWORD(identifier.clone())),
        "shr" => Ok(Token::KEYWORD(identifier.clone())),
        "static" => Ok(Token::KEYWORD(identifier.clone())),
        "template" => Ok(Token::KEYWORD(identifier.clone())),
        "try" => Ok(Token::KEYWORD(identifier.clone())),
        "tuple" => Ok(Token::KEYWORD(identifier.clone())),
        "type" => Ok(Token::KEYWORD(identifier.clone())),
        "using" => Ok(Token::KEYWORD(identifier.clone())),
        "var" => Ok(Token::KEYWORD(identifier.clone())),
        "when" => Ok(Token::KEYWORD(identifier.clone())),
        "while" => Ok(Token::KEYWORD(identifier.clone())),
        "yield" => Ok(Token::KEYWORD(identifier.clone())),
        "xor" => Ok(Token::KEYWORD(identifier.clone())),
        "int" => Ok(Token::KEYWORD(identifier.clone())),
        "int8" => Ok(Token::KEYWORD(identifier.clone())),
        "int16" => Ok(Token::KEYWORD(identifier.clone())),
        "int32" => Ok(Token::KEYWORD(identifier.clone())),
        "int64" => Ok(Token::KEYWORD(identifier.clone())),
        "uint" => Ok(Token::KEYWORD(identifier.clone())),
        "uint8" => Ok(Token::KEYWORD(identifier.clone())),
        "uint16" => Ok(Token::KEYWORD(identifier.clone())),
        "uint32" => Ok(Token::KEYWORD(identifier.clone())),
        "uint64" => Ok(Token::KEYWORD(identifier.clone())),
        "float" => Ok(Token::KEYWORD(identifier.clone())),
        "float32" => Ok(Token::KEYWORD(identifier.clone())),
        "float64" => Ok(Token::KEYWORD(identifier.clone())),
        "char" => Ok(Token::KEYWORD(identifier.clone())),
        "string" => Ok(Token::KEYWORD(identifier.clone())),
        "cstring" => Ok(Token::KEYWORD(identifier.clone())),
        "bool" => Ok(Token::KEYWORD(identifier.clone())),
        _ => Err(String::from("Not a keyword")),
    }
}
