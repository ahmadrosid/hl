// ---- DON'T EDIT! THIS IS AUTO GENERATED CODE ---- //
use crate::lexers::Token;

pub fn get_keyword_token(identifier: &Vec<char>) -> Result<Token, String> {
    let id: String = identifier.into_iter().collect();
    match &id[..] {
        "this" => Ok(Token::CONSTANT(identifier.clone())),
        "true" => Ok(Token::CONSTANT(identifier.clone())),
        "false" => Ok(Token::CONSTANT(identifier.clone())),
        "super" => Ok(Token::CONSTANT(identifier.clone())),
        "null" => Ok(Token::CONSTANT(identifier.clone())),
        "String" => Ok(Token::CONSTANT(identifier.clone())),
        "Long" => Ok(Token::CONSTANT(identifier.clone())),
        "Object" => Ok(Token::CONSTANT(identifier.clone())),
        "Boolean" => Ok(Token::CONSTANT(identifier.clone())),
        "Array" => Ok(Token::CONSTANT(identifier.clone())),
        "List" => Ok(Token::CONSTANT(identifier.clone())),
        "ArrayList" => Ok(Token::CONSTANT(identifier.clone())),
        "Arrays" => Ok(Token::CONSTANT(identifier.clone())),
        "Map" => Ok(Token::CONSTANT(identifier.clone())),
        "HashMap" => Ok(Token::CONSTANT(identifier.clone())),
        "LinkedHashSet" => Ok(Token::CONSTANT(identifier.clone())),
        "abstract" => Ok(Token::KEYWORD(identifier.clone())),
        "byte" => Ok(Token::KEYWORD(identifier.clone())),
        "break" => Ok(Token::KEYWORD(identifier.clone())),
        "class" => Ok(Token::KEYWORD(identifier.clone())),
        "double" => Ok(Token::KEYWORD(identifier.clone())),
        "float" => Ok(Token::KEYWORD(identifier.clone())),
        "final" => Ok(Token::KEYWORD(identifier.clone())),
        "int" => Ok(Token::KEYWORD(identifier.clone())),
        "interface" => Ok(Token::KEYWORD(identifier.clone())),
        "char" => Ok(Token::KEYWORD(identifier.clone())),
        "case" => Ok(Token::KEYWORD(identifier.clone())),
        "default" => Ok(Token::KEYWORD(identifier.clone())),
        "short" => Ok(Token::KEYWORD(identifier.clone())),
        "for" => Ok(Token::KEYWORD(identifier.clone())),
        "package" => Ok(Token::KEYWORD(identifier.clone())),
        "import" => Ok(Token::KEYWORD(identifier.clone())),
        "public" => Ok(Token::KEYWORD(identifier.clone())),
        "private" => Ok(Token::KEYWORD(identifier.clone())),
        "protected" => Ok(Token::KEYWORD(identifier.clone())),
        "extends" => Ok(Token::KEYWORD(identifier.clone())),
        "static" => Ok(Token::KEYWORD(identifier.clone())),
        "void" => Ok(Token::KEYWORD(identifier.clone())),
        "return" => Ok(Token::KEYWORD(identifier.clone())),
        "new" => Ok(Token::KEYWORD(identifier.clone())),
        "if" => Ok(Token::KEYWORD(identifier.clone())),
        "else" => Ok(Token::KEYWORD(identifier.clone())),
        "enum" => Ok(Token::KEYWORD(identifier.clone())),
        "instanceof" => Ok(Token::KEYWORD(identifier.clone())),
        "boolean" => Ok(Token::KEYWORD(identifier.clone())),
        "assert" => Ok(Token::KEYWORD(identifier.clone())),
        "continue" => Ok(Token::KEYWORD(identifier.clone())),
        "native" => Ok(Token::KEYWORD(identifier.clone())),
        "switch" => Ok(Token::KEYWORD(identifier.clone())),
        "synchronized" => Ok(Token::KEYWORD(identifier.clone())),
        "try" => Ok(Token::KEYWORD(identifier.clone())),
        "throw" => Ok(Token::KEYWORD(identifier.clone())),
        "catch" => Ok(Token::KEYWORD(identifier.clone())),
        "volatile" => Ok(Token::KEYWORD(identifier.clone())),
        "while" => Ok(Token::KEYWORD(identifier.clone())),
        "throws" => Ok(Token::KEYWORD(identifier.clone())),
        "finally" => Ok(Token::KEYWORD(identifier.clone())),
        "long" => Ok(Token::KEYWORD(identifier.clone())),
        "do" => Ok(Token::KEYWORD(identifier.clone())),
        "transient" => Ok(Token::KEYWORD(identifier.clone())),
        "strictfp" => Ok(Token::KEYWORD(identifier.clone())),
        "var" => Ok(Token::KEYWORD(identifier.clone())),
        _ => Err(String::from("Not a keyword")),
    }
}
