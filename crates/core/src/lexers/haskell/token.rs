// ---- DON'T EDIT! THIS IS AUTO GENERATED CODE ---- //
use crate::lexers::Token;

pub fn get_keyword_token(identifier: &Vec<char>) -> Result<Token, String> {
    let id: String = identifier.into_iter().collect();
    match &id[..] {
        "True" => Ok(Token::CONSTANT(identifier.clone())),
        "False" => Ok(Token::CONSTANT(identifier.clone())),
        "return" => Ok(Token::CONSTANT(identifier.clone())),
        "mempty" => Ok(Token::CONSTANT(identifier.clone())),
        "not" => Ok(Token::CONSTANT(identifier.clone())),
        "foldr" => Ok(Token::CONSTANT(identifier.clone())),
        "Map" => Ok(Token::CONSTANT(identifier.clone())),
        "lookup" => Ok(Token::CONSTANT(identifier.clone())),
        "Left" => Ok(Token::CONSTANT(identifier.clone())),
        "Right" => Ok(Token::CONSTANT(identifier.clone())),
        "Walk" => Ok(Token::CONSTANT(identifier.clone())),
        "Char" => Ok(Token::CONSTANT(identifier.clone())),
        "Bool" => Ok(Token::CONSTANT(identifier.clone())),
        "Maybe" => Ok(Token::CONSTANT(identifier.clone())),
        "Int" => Ok(Token::CONSTANT(identifier.clone())),
        "Prelude" => Ok(Token::CONSTANT(identifier.clone())),
        "any" => Ok(Token::CONSTANT(identifier.clone())),
        "filter" => Ok(Token::CONSTANT(identifier.clone())),
        "map" => Ok(Token::CONSTANT(identifier.clone())),
        "init" => Ok(Token::CONSTANT(identifier.clone())),
        "null" => Ok(Token::CONSTANT(identifier.clone())),
        "last" => Ok(Token::CONSTANT(identifier.clone())),
        "unwords" => Ok(Token::CONSTANT(identifier.clone())),
        "otherwise" => Ok(Token::CONSTANT(identifier.clone())),
        "either" => Ok(Token::CONSTANT(identifier.clone())),
        "const" => Ok(Token::CONSTANT(identifier.clone())),
        "fmap" => Ok(Token::CONSTANT(identifier.clone())),
        "take" => Ok(Token::CONSTANT(identifier.clone())),
        "max" => Ok(Token::CONSTANT(identifier.clone())),
        "putStrLn" => Ok(Token::CONSTANT(identifier.clone())),
        "Bibtex" => Ok(Token::ENTITYTAG(identifier.clone())),
        "Biblatex" => Ok(Token::ENTITYTAG(identifier.clone())),
        "Nothing" => Ok(Token::ENTITYTAG(identifier.clone())),
        "Just" => Ok(Token::ENTITYTAG(identifier.clone())),
        "Str" => Ok(Token::ENTITYTAG(identifier.clone())),
        "Space" => Ok(Token::ENTITYTAG(identifier.clone())),
        "FancyVal" => Ok(Token::ENTITYTAG(identifier.clone())),
        "BibState" => Ok(Token::ENTITYTAG(identifier.clone())),
        "Many" => Ok(Token::ENTITYTAG(identifier.clone())),
        "as" => Ok(Token::KEYWORD(identifier.clone())),
        "import" => Ok(Token::KEYWORD(identifier.clone())),
        "type" => Ok(Token::KEYWORD(identifier.clone())),
        "case" => Ok(Token::KEYWORD(identifier.clone())),
        "do" => Ok(Token::KEYWORD(identifier.clone())),
        "of" => Ok(Token::KEYWORD(identifier.clone())),
        "if" => Ok(Token::KEYWORD(identifier.clone())),
        "then" => Ok(Token::KEYWORD(identifier.clone())),
        "else" => Ok(Token::KEYWORD(identifier.clone())),
        "let" => Ok(Token::KEYWORD(identifier.clone())),
        "in" => Ok(Token::KEYWORD(identifier.clone())),
        "module" => Ok(Token::KEYWORD(identifier.clone())),
        "qualified" => Ok(Token::KEYWORD(identifier.clone())),
        "where" => Ok(Token::KEYWORD(identifier.clone())),
        "LANGUAGE" => Ok(Token::KEYWORD(identifier.clone())),
        "OPTIONS_GHC" => Ok(Token::KEYWORD(identifier.clone())),
        "hiding" => Ok(Token::KEYWORD(identifier.clone())),
        "data" => Ok(Token::KEYWORD(identifier.clone())),
        "deriving" => Ok(Token::KEYWORD(identifier.clone())),
        _ => Err(String::from("Not a keyword")),
    }
}
