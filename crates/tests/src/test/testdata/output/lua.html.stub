<table class="highlight-table">
<tbody>
<tr><td class="hl-num" data-line="1"></td><td><span class="hl-k">local</span> sfind <span class="hl-k">=</span> string.find</td></tr>
<tr><td class="hl-num" data-line="2"></td><td><span class="hl-k">local</span> ssub  <span class="hl-k">=</span> string.sub</td></tr>
<tr><td class="hl-num" data-line="3"></td><td></td></tr>
<tr><td class="hl-num" data-line="4"></td><td>description <span class="hl-k">=</span> <span class="hl-s">[[</span></td></tr>
<tr><td class="hl-num" data-line="5"></td><td><span class="hl-s">Weak ephemeral Diffie-Hellman parameter detection for SSL/TLS services.</span></td></tr>
<tr><td class="hl-num" data-line="6"></td><td><span class="hl-s">This script simulates SSL/TLS handshakes using ciphersuites that have ephemeral</span></td></tr>
<tr><td class="hl-num" data-line="7"></td><td><span class="hl-s">Diffie-Hellman as the key exchange algorithm.</span></td></tr>
<tr><td class="hl-num" data-line="8"></td><td><span class="hl-s">Diffie-Hellman MODP group parameters are extracted and analyzed for vulnerability</span></td></tr>
<tr><td class="hl-num" data-line="9"></td><td><span class="hl-s">to Logjam (CVE 2015-4000) and other weaknesses.</span></td></tr>
<tr><td class="hl-num" data-line="10"></td><td><span class="hl-s">Opportunistic STARTTLS sessions are established on services that support them.</span></td></tr>
<tr><td class="hl-num" data-line="11"></td><td><span class="hl-s">]]</span></td></tr>
<tr><td class="hl-num" data-line="12"></td><td></td></tr>
<tr><td class="hl-num" data-line="13"></td><td><span class="hl-k">local</span> lib_path <span class="hl-k">=</span> reaper.<span class="hl-en">GetExtState</span>(<span class="hl-s">"Lokasenna_GUI"</span>, <span class="hl-s">"lib_path_v2"</span>)</td></tr>
<tr><td class="hl-num" data-line="14"></td><td>  <span class="hl-k">if</span> <span class="hl-k">not</span> reaper.<span class="hl-en">file_exists</span>(lib_path .. <span class="hl-s">"Core.lua"</span>) <span class="hl-k">or</span> <span class="hl-k">not</span> lib_path <span class="hl-k">or</span> lib_path <span class="hl-k">=</span><span class="hl-k">=</span> <span class="hl-s">""</span> <span class="hl-k">then</span></td></tr>
<tr><td class="hl-num" data-line="15"></td><td>    reaper.<span class="hl-en">MB</span>(<span class="hl-s">"Couldn't load the Lokasenna_GUI library.\n\n1) Please install \"Lokasenna's GUI library v2 for Lua\", 0)</span></td></tr>
<tr><td class="hl-num" data-line="16"></td><td><span class="hl-s">  return</span></td></tr>
<tr><td class="hl-num" data-line="17"></td><td><span class="hl-s">end</span></td></tr>
<tr><td class="hl-num" data-line="18"></td><td><span class="hl-s"></span></td></tr>
<tr><td class="hl-num" data-line="19"></td><td><span class="hl-s">---@param text string</span></td></tr>
<tr><td class="hl-num" data-line="20"></td><td><span class="hl-s">return function (text)</span></td></tr>
<tr><td class="hl-num" data-line="21"></td><td><span class="hl-s">    local current = 1</span></td></tr>
<tr><td class="hl-num" data-line="22"></td><td><span class="hl-s">    local lines = {}</span></td></tr>
<tr><td class="hl-num" data-line="23"></td><td><span class="hl-s">    lines[0] = 1</span></td></tr>
<tr><td class="hl-num" data-line="24"></td><td><span class="hl-s">    local i = 0</span></td></tr>
<tr><td class="hl-num" data-line="25"></td><td><span class="hl-s">    while true do</span></td></tr>
<tr><td class="hl-num" data-line="26"></td><td><span class="hl-s">        local pos = sfind(text,'[\r\n]', current)</span></td></tr>
<tr><td class="hl-num" data-line="27"></td><td><span class="hl-s">        if not pos then</span></td></tr>
<tr><td class="hl-num" data-line="28"></td><td><span class="hl-s">            break</span></td></tr>
<tr><td class="hl-num" data-line="29"></td><td><span class="hl-s">        end</span></td></tr>
<tr><td class="hl-num" data-line="30"></td><td><span class="hl-s">        i = i + 1</span></td></tr>
<tr><td class="hl-num" data-line="31"></td><td><span class="hl-s">        if ssub(text, pos, pos + 1) == '\r\n' then</span></td></tr>
<tr><td class="hl-num" data-line="32"></td><td><span class="hl-s">            current = pos + 2</span></td></tr>
<tr><td class="hl-num" data-line="33"></td><td><span class="hl-s">        else</span></td></tr>
<tr><td class="hl-num" data-line="34"></td><td><span class="hl-s">            current = pos + 1</span></td></tr>
<tr><td class="hl-num" data-line="35"></td><td><span class="hl-s">        end</span></td></tr>
<tr><td class="hl-num" data-line="36"></td><td><span class="hl-s">        lines[i] = current</span></td></tr>
<tr><td class="hl-num" data-line="37"></td><td><span class="hl-s">    end</span></td></tr>
<tr><td class="hl-num" data-line="38"></td><td><span class="hl-s">    return lines</span></td></tr>
<tr><td class="hl-num" data-line="39"></td><td><span class="hl-s">end</span></td></tr>
<tr><td class="hl-num" data-line="40"></td><td><span class="hl-s"></span></td></tr>
<tr><td class="hl-num" data-line="41"></td><td><span class="hl-s">function server()</span></td></tr>
<tr><td class="hl-num" data-line="42"></td><td><span class="hl-s">  -- Send request.</span></td></tr>
<tr><td class="hl-num" data-line="43"></td><td><span class="hl-s">  local req = tls.client_hello(t)</span></td></tr>
<tr><td class="hl-num" data-line="44"></td><td><span class="hl-s">  status, err = sock:send(req)</span></td></tr>
<tr><td class="hl-num" data-line="45"></td><td><span class="hl-s">  if not status then</span></td></tr>
<tr><td class="hl-num" data-line="46"></td><td><span class="hl-s">    ctx_log(1, t.protocol, "</span>Can<span class="hl-s">'t send: %s", err)</span></td></tr>
<tr><td class="hl-num" data-line="47"></td><td><span class="hl-s">    sock:close()</span></td></tr>
<tr><td class="hl-num" data-line="48"></td><td><span class="hl-s">    return nil</span></td></tr>
<tr><td class="hl-num" data-line="49"></td><td><span class="hl-s">  end</span></td></tr>
<tr><td class="hl-num" data-line="50"></td><td><span class="hl-s"></span></td></tr>
<tr><td class="hl-num" data-line="51"></td><td><span class="hl-s">  -- Read response.</span></td></tr>
<tr><td class="hl-num" data-line="52"></td><td><span class="hl-s">  local get_next_record = get_record_iter(sock)</span></td></tr>
<tr><td class="hl-num" data-line="53"></td><td><span class="hl-s">  local records = {}</span></td></tr>
<tr><td class="hl-num" data-line="54"></td><td><span class="hl-s">  while true do</span></td></tr>
<tr><td class="hl-num" data-line="55"></td><td><span class="hl-s">    local record</span></td></tr>
<tr><td class="hl-num" data-line="56"></td><td><span class="hl-s">    record, err = get_next_record()</span></td></tr>
<tr><td class="hl-num" data-line="57"></td><td><span class="hl-s">    if not record then</span></td></tr>
<tr><td class="hl-num" data-line="58"></td><td><span class="hl-s">      ctx_log(1, t.protocol, "Couldn'</span>t read a TLS record: %s<span class="hl-s">", err)</span></td></tr>
<tr><td class="hl-num" data-line="59"></td><td><span class="hl-s">      sock:close()</span></td></tr>
<tr><td class="hl-num" data-line="60"></td><td><span class="hl-s">      return records</span></td></tr>
<tr><td class="hl-num" data-line="61"></td><td><span class="hl-s">    end</span></td></tr>
<tr><td class="hl-num" data-line="62"></td><td><span class="hl-s">    -- Collect message bodies into one record per type</span></td></tr>
<tr><td class="hl-num" data-line="63"></td><td><span class="hl-s">    records[record.type] = records[record.type] or record</span></td></tr>
<tr><td class="hl-num" data-line="64"></td><td><span class="hl-s">    local done = false</span></td></tr>
<tr><td class="hl-num" data-line="65"></td><td><span class="hl-s">    for j = 1, #record.body do -- no ipairs because we append below</span></td></tr>
<tr><td class="hl-num" data-line="66"></td><td><span class="hl-s">      local b = record.body[j]</span></td></tr>
<tr><td class="hl-num" data-line="67"></td><td><span class="hl-s">      done = ((record.type == "</span>alert<span class="hl-s">" and b.level == "</span>fatal<span class="hl-s">") or</span></td></tr>
<tr><td class="hl-num" data-line="68"></td><td><span class="hl-s">        (record.type == "</span>handshake<span class="hl-s">" and b.type == "</span>server_hello_done<span class="hl-s">"))</span></td></tr>
<tr><td class="hl-num" data-line="69"></td><td><span class="hl-s">      table.insert(records[record.type].body, b)</span></td></tr>
<tr><td class="hl-num" data-line="70"></td><td><span class="hl-s">    end</span></td></tr>
<tr><td class="hl-num" data-line="71"></td><td><span class="hl-s">    if done then</span></td></tr>
<tr><td class="hl-num" data-line="72"></td><td><span class="hl-s">      sock:close()</span></td></tr>
<tr><td class="hl-num" data-line="73"></td><td><span class="hl-s">      return records</span></td></tr>
<tr><td class="hl-num" data-line="74"></td><td><span class="hl-s">    end</span></td></tr>
<tr><td class="hl-num" data-line="75"></td><td><span class="hl-s">  end</span></td></tr>
<tr><td class="hl-num" data-line="76"></td><td><span class="hl-s">end</span></td></tr>
</tbody>
</table>