// ---- DON'T EDIT! THIS IS AUTO GENERATED CODE ---- //
#[derive(PartialEq, Debug)]
pub enum Token {
    ILLEGAL,
    EOF,
    ENDL(char),
    INT(Vec<char>),
    IDENT(Vec<char>),
    CH(char),
    ENTITY(Vec<char>),
    STRING(Vec<char>),
    CONSTANT(Vec<char>),
    KEYWORD(Vec<char>),
    COMMENT(Vec<char>),
}

pub fn get_keyword_token(identifier: &Vec<char>) -> Result<Token, String> {
    let id: String = identifier.into_iter().collect();
    match &id[..] {
        "true" => Ok(Token::CONSTANT(identifier.to_vec())),
        "false" => Ok(Token::CONSTANT(identifier.to_vec())),
        "null" => Ok(Token::CONSTANT(identifier.to_vec())),
        "this" => Ok(Token::CONSTANT(identifier.to_vec())),
        "abstract" => Ok(Token::KEYWORD(identifier.to_vec())),
        "as" => Ok(Token::KEYWORD(identifier.to_vec())),
        "async" => Ok(Token::KEYWORD(identifier.to_vec())),
        "await" => Ok(Token::KEYWORD(identifier.to_vec())),
        "base" => Ok(Token::KEYWORD(identifier.to_vec())),
        "bool" => Ok(Token::KEYWORD(identifier.to_vec())),
        "break" => Ok(Token::KEYWORD(identifier.to_vec())),
        "byte" => Ok(Token::KEYWORD(identifier.to_vec())),
        "case" => Ok(Token::KEYWORD(identifier.to_vec())),
        "catch" => Ok(Token::KEYWORD(identifier.to_vec())),
        "char" => Ok(Token::KEYWORD(identifier.to_vec())),
        "checked" => Ok(Token::KEYWORD(identifier.to_vec())),
        "class" => Ok(Token::KEYWORD(identifier.to_vec())),
        "const" => Ok(Token::KEYWORD(identifier.to_vec())),
        "continue" => Ok(Token::KEYWORD(identifier.to_vec())),
        "decimal" => Ok(Token::KEYWORD(identifier.to_vec())),
        "default" => Ok(Token::KEYWORD(identifier.to_vec())),
        "delegate" => Ok(Token::KEYWORD(identifier.to_vec())),
        "do" => Ok(Token::KEYWORD(identifier.to_vec())),
        "double" => Ok(Token::KEYWORD(identifier.to_vec())),
        "else" => Ok(Token::KEYWORD(identifier.to_vec())),
        "enum" => Ok(Token::KEYWORD(identifier.to_vec())),
        "event" => Ok(Token::KEYWORD(identifier.to_vec())),
        "explicit" => Ok(Token::KEYWORD(identifier.to_vec())),
        "extern" => Ok(Token::KEYWORD(identifier.to_vec())),
        "finally" => Ok(Token::KEYWORD(identifier.to_vec())),
        "fixed" => Ok(Token::KEYWORD(identifier.to_vec())),
        "float" => Ok(Token::KEYWORD(identifier.to_vec())),
        "for" => Ok(Token::KEYWORD(identifier.to_vec())),
        "foreach" => Ok(Token::KEYWORD(identifier.to_vec())),
        "goto" => Ok(Token::KEYWORD(identifier.to_vec())),
        "if" => Ok(Token::KEYWORD(identifier.to_vec())),
        "implicit" => Ok(Token::KEYWORD(identifier.to_vec())),
        "in" => Ok(Token::KEYWORD(identifier.to_vec())),
        "int" => Ok(Token::KEYWORD(identifier.to_vec())),
        "interface" => Ok(Token::KEYWORD(identifier.to_vec())),
        "internal" => Ok(Token::KEYWORD(identifier.to_vec())),
        "is" => Ok(Token::KEYWORD(identifier.to_vec())),
        "lock" => Ok(Token::KEYWORD(identifier.to_vec())),
        "long" => Ok(Token::KEYWORD(identifier.to_vec())),
        "namespace" => Ok(Token::KEYWORD(identifier.to_vec())),
        "new" => Ok(Token::KEYWORD(identifier.to_vec())),
        "object" => Ok(Token::KEYWORD(identifier.to_vec())),
        "operator" => Ok(Token::KEYWORD(identifier.to_vec())),
        "out" => Ok(Token::KEYWORD(identifier.to_vec())),
        "override" => Ok(Token::KEYWORD(identifier.to_vec())),
        "params" => Ok(Token::KEYWORD(identifier.to_vec())),
        "private" => Ok(Token::KEYWORD(identifier.to_vec())),
        "protected" => Ok(Token::KEYWORD(identifier.to_vec())),
        "public" => Ok(Token::KEYWORD(identifier.to_vec())),
        "readonly" => Ok(Token::KEYWORD(identifier.to_vec())),
        "ref" => Ok(Token::KEYWORD(identifier.to_vec())),
        "return" => Ok(Token::KEYWORD(identifier.to_vec())),
        "sbyte" => Ok(Token::KEYWORD(identifier.to_vec())),
        "sealed" => Ok(Token::KEYWORD(identifier.to_vec())),
        "short" => Ok(Token::KEYWORD(identifier.to_vec())),
        "sizeof" => Ok(Token::KEYWORD(identifier.to_vec())),
        "stackalloc" => Ok(Token::KEYWORD(identifier.to_vec())),
        "static" => Ok(Token::KEYWORD(identifier.to_vec())),
        "string" => Ok(Token::KEYWORD(identifier.to_vec())),
        "struct" => Ok(Token::KEYWORD(identifier.to_vec())),
        "switch" => Ok(Token::KEYWORD(identifier.to_vec())),
        "throw" => Ok(Token::KEYWORD(identifier.to_vec())),
        "try" => Ok(Token::KEYWORD(identifier.to_vec())),
        "typeof" => Ok(Token::KEYWORD(identifier.to_vec())),
        "uint" => Ok(Token::KEYWORD(identifier.to_vec())),
        "ulong" => Ok(Token::KEYWORD(identifier.to_vec())),
        "unchecked" => Ok(Token::KEYWORD(identifier.to_vec())),
        "unsafe" => Ok(Token::KEYWORD(identifier.to_vec())),
        "ushort" => Ok(Token::KEYWORD(identifier.to_vec())),
        "using" => Ok(Token::KEYWORD(identifier.to_vec())),
        "virtual" => Ok(Token::KEYWORD(identifier.to_vec())),
        "var" => Ok(Token::KEYWORD(identifier.to_vec())),
        "void" => Ok(Token::KEYWORD(identifier.to_vec())),
        "volatile" => Ok(Token::KEYWORD(identifier.to_vec())),
        "while" => Ok(Token::KEYWORD(identifier.to_vec())),
        "yield" => Ok(Token::KEYWORD(identifier.to_vec())),
        "add" => Ok(Token::KEYWORD(identifier.to_vec())),
        "remove" => Ok(Token::KEYWORD(identifier.to_vec())),
        "region" => Ok(Token::KEYWORD(identifier.to_vec())),
        "endregion" => Ok(Token::KEYWORD(identifier.to_vec())),
        "where" => Ok(Token::KEYWORD(identifier.to_vec())),
        "get" => Ok(Token::KEYWORD(identifier.to_vec())),
        "set" => Ok(Token::KEYWORD(identifier.to_vec())),
        "global" => Ok(Token::KEYWORD(identifier.to_vec())),
        _ => Err(String::from("Not a keyword")),
    }
}
