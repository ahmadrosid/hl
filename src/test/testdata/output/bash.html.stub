<table class="highlight-table">
<tbody>
<tr><td class="hl-num" data-line="1"></td><td>__require_tool_version_compare ()</td></tr>
<tr><td class="hl-num" data-line="2"></td><td>{</td></tr>
<tr><td class="hl-num" data-line="3"></td><td>  (</td></tr>
<tr><td class="hl-num" data-line="4"></td><td>    <span class="hl-cmt"># Locally ignore failures, otherwise we'll exit whenever $1 and $2</span></td></tr>
<tr><td class="hl-num" data-line="5"></td><td><span class="hl-cmt"></span>    <span class="hl-cmt"># are not equal!</span></td></tr>
<tr><td class="hl-num" data-line="6"></td><td><span class="hl-cmt"></span>    set +e</td></tr>
<tr><td class="hl-num" data-line="7"></td><td></td></tr>
<tr><td class="hl-num" data-line="8"></td><td>awk_strverscmp=<span class="hl-s">'</span></td></tr>
<tr><td class="hl-num" data-line="9"></td><td><span class="hl-s">  # Use only awk features that work with 7th edition Unix awk (1978).</span></td></tr>
<tr><td class="hl-num" data-line="10"></td><td><span class="hl-s">  # My, what an old awk you have, Mr. Solaris!</span></td></tr>
<tr><td class="hl-num" data-line="11"></td><td><span class="hl-s">  END {</span></td></tr>
<tr><td class="hl-num" data-line="12"></td><td><span class="hl-s">    while (length(v1) || length(v2)) {</span></td></tr>
<tr><td class="hl-num" data-line="13"></td><td><span class="hl-s">      # Set d1 to be the next thing to compare from v1, and likewise for d2.</span></td></tr>
<tr><td class="hl-num" data-line="14"></td><td><span class="hl-s">      # Normally this is a single character, but if v1 and v2 contain digits,</span></td></tr>
<tr><td class="hl-num" data-line="15"></td><td><span class="hl-s">      # compare them as integers and fractions as strverscmp does.</span></td></tr>
<tr><td class="hl-num" data-line="16"></td><td><span class="hl-s">      if (v1 ~ /^[0-9]/ && v2 ~ /^[0-9]/) {</span></td></tr>
<tr><td class="hl-num" data-line="17"></td><td><span class="hl-s">	# Split v1 and v2 into their leading digit string components d1 and d2,</span></td></tr>
<tr><td class="hl-num" data-line="18"></td><td><span class="hl-s">	# and advance v1 and v2 past the leading digit strings.</span></td></tr>
<tr><td class="hl-num" data-line="19"></td><td><span class="hl-s">	for (len1 = 1; substr(v1, len1 + 1) ~ /^[0-9]/; len1++) continue</span></td></tr>
<tr><td class="hl-num" data-line="20"></td><td><span class="hl-s">	for (len2 = 1; substr(v2, len2 + 1) ~ /^[0-9]/; len2++) continue</span></td></tr>
<tr><td class="hl-num" data-line="21"></td><td><span class="hl-s">	d1 = substr(v1, 1, len1); v1 = substr(v1, len1 + 1)</span></td></tr>
<tr><td class="hl-num" data-line="22"></td><td><span class="hl-s">	d2 = substr(v2, 1, len2); v2 = substr(v2, len2 + 1)</span></td></tr>
<tr><td class="hl-num" data-line="23"></td><td><span class="hl-s">	if (d1 ~ /^0/) {</span></td></tr>
<tr><td class="hl-num" data-line="24"></td><td><span class="hl-s">	  if (d2 ~ /^0/) {</span></td></tr>
<tr><td class="hl-num" data-line="25"></td><td><span class="hl-s">	    # Compare two fractions.</span></td></tr>
<tr><td class="hl-num" data-line="26"></td><td><span class="hl-s">	    while (d1 ~ /^0/ && d2 ~ /^0/) {</span></td></tr>
<tr><td class="hl-num" data-line="27"></td><td><span class="hl-s">	      d1 = substr(d1, 2); len1--</span></td></tr>
<tr><td class="hl-num" data-line="28"></td><td><span class="hl-s">	      d2 = substr(d2, 2); len2--</span></td></tr>
<tr><td class="hl-num" data-line="29"></td><td><span class="hl-s">	    }</span></td></tr>
<tr><td class="hl-num" data-line="30"></td><td><span class="hl-s">	    if (len1 != len2 && ! (len1 && len2 && substr(d1, 1, 1) == substr(d2, 1, 1))) {</span></td></tr>
<tr><td class="hl-num" data-line="31"></td><td><span class="hl-s">	      # The two components differ in length, and the common prefix</span></td></tr>
<tr><td class="hl-num" data-line="32"></td><td><span class="hl-s">	      # contains only leading zeros.  Consider the longer to be less.</span></td></tr>
<tr><td class="hl-num" data-line="33"></td><td><span class="hl-s">	      d1 = -len1</span></td></tr>
<tr><td class="hl-num" data-line="34"></td><td><span class="hl-s">	      d2 = -len2</span></td></tr>
<tr><td class="hl-num" data-line="35"></td><td><span class="hl-s">	    } else {</span></td></tr>
<tr><td class="hl-num" data-line="36"></td><td><span class="hl-s">	      # Otherwise, compare as strings.</span></td></tr>
<tr><td class="hl-num" data-line="37"></td><td><span class="hl-s">	      d1 = "x" d1</span></td></tr>
<tr><td class="hl-num" data-line="38"></td><td><span class="hl-s">	      d2 = "x" d2</span></td></tr>
<tr><td class="hl-num" data-line="39"></td><td><span class="hl-s">	    }</span></td></tr>
<tr><td class="hl-num" data-line="40"></td><td><span class="hl-s">	  } else {</span></td></tr>
<tr><td class="hl-num" data-line="41"></td><td><span class="hl-s">	    # A fraction is less than an integer.</span></td></tr>
<tr><td class="hl-num" data-line="42"></td><td><span class="hl-s">	    exit 1</span></td></tr>
<tr><td class="hl-num" data-line="43"></td><td><span class="hl-s">	  }</span></td></tr>
<tr><td class="hl-num" data-line="44"></td><td><span class="hl-s">	} else {</span></td></tr>
<tr><td class="hl-num" data-line="45"></td><td><span class="hl-s">	  if (d2 ~ /^0/) {</span></td></tr>
<tr><td class="hl-num" data-line="46"></td><td><span class="hl-s">	    # An integer is greater than a fraction.</span></td></tr>
<tr><td class="hl-num" data-line="47"></td><td><span class="hl-s">	    exit 2</span></td></tr>
<tr><td class="hl-num" data-line="48"></td><td><span class="hl-s">	  } else {</span></td></tr>
<tr><td class="hl-num" data-line="49"></td><td><span class="hl-s">	    # Compare two integers.</span></td></tr>
<tr><td class="hl-num" data-line="50"></td><td><span class="hl-s">	    d1 += 0</span></td></tr>
<tr><td class="hl-num" data-line="51"></td><td><span class="hl-s">	    d2 += 0</span></td></tr>
<tr><td class="hl-num" data-line="52"></td><td><span class="hl-s">	  }</span></td></tr>
<tr><td class="hl-num" data-line="53"></td><td><span class="hl-s">	}</span></td></tr>
<tr><td class="hl-num" data-line="54"></td><td><span class="hl-s">      } else {</span></td></tr>
<tr><td class="hl-num" data-line="55"></td><td><span class="hl-s">	# The normal case, without worrying about digits.</span></td></tr>
<tr><td class="hl-num" data-line="56"></td><td><span class="hl-s">	if (v1 == "") d1 = v1; else { d1 = substr(v1, 1, 1); v1 = substr(v1,2) }</span></td></tr>
<tr><td class="hl-num" data-line="57"></td><td><span class="hl-s">	if (v2 == "") d2 = v2; else { d2 = substr(v2, 1, 1); v2 = substr(v2,2) }</span></td></tr>
<tr><td class="hl-num" data-line="58"></td><td><span class="hl-s">      }</span></td></tr>
<tr><td class="hl-num" data-line="59"></td><td><span class="hl-s">      if (d1 &lt; d2) exit 1</span></td></tr>
<tr><td class="hl-num" data-line="60"></td><td><span class="hl-s">      if (d1 &gt; d2) exit 2</span></td></tr>
<tr><td class="hl-num" data-line="61"></td><td><span class="hl-s">    }</span></td></tr>
<tr><td class="hl-num" data-line="62"></td><td><span class="hl-s">  }</span></td></tr>
<tr><td class="hl-num" data-line="63"></td><td><span class="hl-s">'</span></td></tr>
<tr><td class="hl-num" data-line="64"></td><td>    awk <span class="hl-s">"$awk_strverscmp"</span> v<span class="hl-c">1</span>=<span class="hl-s">"$1"</span> v<span class="hl-c">2</span>=<span class="hl-s">"$2"</span> /dev/null</td></tr>
<tr><td class="hl-num" data-line="65"></td><td>    <span class="hl-k">case</span> $? <span class="hl-k">in</span></td></tr>
<tr><td class="hl-num" data-line="66"></td><td>      <span class="hl-c">1</span>)  <span class="hl-c">echo</span> <span class="hl-s">'&lt;'</span>;;</td></tr>
<tr><td class="hl-num" data-line="67"></td><td>      <span class="hl-c">0</span>)  <span class="hl-c">echo</span> <span class="hl-s">'='</span>;;</td></tr>
<tr><td class="hl-num" data-line="68"></td><td>      <span class="hl-c">2</span>)  <span class="hl-c">echo</span> <span class="hl-s">'&gt;'</span>;;</td></tr>
<tr><td class="hl-num" data-line="69"></td><td>    <span class="hl-k">esac</span></td></tr>
<tr><td class="hl-num" data-line="70"></td><td>  )</td></tr>
<tr><td class="hl-num" data-line="71"></td><td>}</td></tr>
<tr><td class="hl-num" data-line="72"></td><td></td></tr>
<tr><td class="hl-num" data-line="73"></td><td></td></tr>
<tr><td class="hl-num" data-line="74"></td><td>__require_tool_fatal ()</td></tr>
<tr><td class="hl-num" data-line="75"></td><td>{</td></tr>
<tr><td class="hl-num" data-line="76"></td><td>    <span class="hl-c">echo</span> $@ >/dev/stderr</td></tr>
<tr><td class="hl-num" data-line="77"></td><td>    <span class="hl-k">return</span> <span class="hl-c">1</span></td></tr>
<tr><td class="hl-num" data-line="78"></td><td>}</td></tr>
<tr><td class="hl-num" data-line="79"></td><td></td></tr>
<tr><td class="hl-num" data-line="80"></td><td><span class="hl-cmt"># Usage: require_tool program version</span></td></tr>
<tr><td class="hl-num" data-line="81"></td><td><span class="hl-cmt"></span><span class="hl-cmt"># Returns: 0 if $1 version if greater equals than $2, 1 otherwise.</span></td></tr>
<tr><td class="hl-num" data-line="82"></td><td><span class="hl-cmt"></span><span class="hl-cmt"># In case of error, message is written on error output.</span></td></tr>
<tr><td class="hl-num" data-line="83"></td><td><span class="hl-cmt"></span><span class="hl-cmt">#</span></td></tr>
<tr><td class="hl-num" data-line="84"></td><td><span class="hl-cmt"></span><span class="hl-cmt"># Example: require_tool gcc 4.6</span></td></tr>
<tr><td class="hl-num" data-line="85"></td><td><span class="hl-cmt"></span><span class="hl-cmt"># Use GCC environment variable if defined instead of lookup for the tool</span></td></tr>
<tr><td class="hl-num" data-line="86"></td><td><span class="hl-cmt"></span><span class="hl-cmt"># in the environment.</span></td></tr>
<tr><td class="hl-num" data-line="87"></td><td><span class="hl-cmt"></span>require_tool ()</td></tr>
<tr><td class="hl-num" data-line="88"></td><td>{</td></tr>
<tr><td class="hl-num" data-line="89"></td><td>  envvar_name=$(<span class="hl-c">echo</span> $<span class="hl-c">1</span> <span class="hl-k">|</span> tr <span class="hl-s">'[:lower:]'</span> <span class="hl-s">'[:upper:]'</span>)</td></tr>
<tr><td class="hl-num" data-line="90"></td><td>  tool=$(printenv $envvar_name <span class="hl-k">|</span><span class="hl-k">|</span> <span class="hl-c">echo</span> $<span class="hl-c">1</span>)</td></tr>
<tr><td class="hl-num" data-line="91"></td><td>  <span class="hl-k">local</span> version=$($tool <span class="hl-k">-</span><span class="hl-k">-version</span> <span class="hl-c">2</span>>/dev/null<span class="hl-k">|</span> \</td></tr>
<tr><td class="hl-num" data-line="92"></td><td>    sed <span class="hl-k">-n</span> <span class="hl-s">'s/.*[^0-9.]\([0-9]*\.[0-9.]*\).*/\1/p;q'</span>)</td></tr>
<tr><td class="hl-num" data-line="93"></td><td>  <span class="hl-k">if</span> <span class="hl-c">test</span> x<span class="hl-s">"$version"</span> = x ; <span class="hl-k">then</span></td></tr>
<tr><td class="hl-num" data-line="94"></td><td>      <span class="hl-c">echo</span> <span class="hl-s">"$tool is required"</span> >/dev/stderr</td></tr>
<tr><td class="hl-num" data-line="95"></td><td>      <span class="hl-k">return</span> <span class="hl-c">1</span></td></tr>
<tr><td class="hl-num" data-line="96"></td><td>  <span class="hl-k">fi</span></td></tr>
<tr><td class="hl-num" data-line="97"></td><td>  <span class="hl-k">case</span> $(__require_tool_version_compare <span class="hl-s">"$2"</span> <span class="hl-s">"$version"</span>) <span class="hl-k">in</span></td></tr>
<tr><td class="hl-num" data-line="98"></td><td>    <span class="hl-s">'&gt;'</span>)</td></tr>
<tr><td class="hl-num" data-line="99"></td><td>	  <span class="hl-c">echo</span> <span class="hl-s">"$1 $2 or better is required: this is $tool $version"</span> >/dev/stderr</td></tr>
<tr><td class="hl-num" data-line="100"></td><td>	  <span class="hl-k">return</span> <span class="hl-c">1</span></td></tr>
<tr><td class="hl-num" data-line="101"></td><td>	  ;;</td></tr>
<tr><td class="hl-num" data-line="102"></td><td>  <span class="hl-k">esac</span></td></tr>
<tr><td class="hl-num" data-line="103"></td><td>}</td></tr>
<tr><td class="hl-num" data-line="104"></td><td></td></tr>
<tr><td class="hl-num" data-line="105"></td><td><span class="hl-en">usage</span>() {</td></tr>
<tr><td class="hl-num" data-line="106"></td><td>    cat <<<span class="hl-k">EOF</span></td></tr>
<tr><td class="hl-num" data-line="107"></td><td>NAME</td></tr>
<tr><td class="hl-num" data-line="108"></td><td>    require_tool.sh - Ensure version of a tool is greater than the one expected</td></tr>
<tr><td class="hl-num" data-line="109"></td><td></td></tr>
<tr><td class="hl-num" data-line="110"></td><td>SYNOPSYS</td></tr>
<tr><td class="hl-num" data-line="111"></td><td>    require_tool.sh <span class="hl-k">[</span> <span class="hl-k">-h</span> <span class="hl-k">]</span></td></tr>
<tr><td class="hl-num" data-line="112"></td><td>                    <span class="hl-k">[</span> <span class="hl-k">-</span><span class="hl-k">-help</span> <span class="hl-k">]</span></td></tr>
<tr><td class="hl-num" data-line="113"></td><td>                    <span class="hl-k">[</span> TOOL MIN_VERSION <span class="hl-k">]</span></td></tr>
<tr><td class="hl-num" data-line="114"></td><td></td></tr>
<tr><td class="hl-num" data-line="115"></td><td>DESCRIPTION</td></tr>
<tr><td class="hl-num" data-line="116"></td><td>    TOOL is the name or path of the program to check. If the name is specified, its</td></tr>
<tr><td class="hl-num" data-line="117"></td><td>    path is deduced from PATH environment variable. If environment variable TOOL</td></tr>
<tr><td class="hl-num" data-line="118"></td><td>    (<span class="hl-k">in</span> upper<span class="hl-k">-case</span> characters) is defined, considers its value as path to the tool.</td></tr>
<tr><td class="hl-num" data-line="119"></td><td></td></tr>
<tr><td class="hl-num" data-line="120"></td><td>    MIN_VERSION is a string representing the minimum required version.</td></tr>
<tr><td class="hl-num" data-line="121"></td><td></td></tr>
<tr><td class="hl-num" data-line="122"></td><td>BEHAVIOR</td></tr>
<tr><td class="hl-num" data-line="123"></td><td>    * locate path to the program.</td></tr>
<tr><td class="hl-num" data-line="124"></td><td>    * execute $ TOOL_PATH <span class="hl-k">-</span><span class="hl-k">-version</span></td></tr>
<tr><td class="hl-num" data-line="125"></td><td>    * extract version from standard output.</td></tr>
<tr><td class="hl-num" data-line="126"></td><td>    * compare this version to the expected one.</td></tr>
<tr><td class="hl-num" data-line="127"></td><td></td></tr>
<tr><td class="hl-num" data-line="128"></td><td>OPTIONS</td></tr>
<tr><td class="hl-num" data-line="129"></td><td>    <span class="hl-k">-h</span> <span class="hl-k">-</span><span class="hl-k">-help</span></td></tr>
<tr><td class="hl-num" data-line="130"></td><td>        Display this message and <span class="hl-c">exit</span> <span class="hl-c">0</span></td></tr>
<tr><td class="hl-num" data-line="131"></td><td></td></tr>
<tr><td class="hl-num" data-line="132"></td><td>ERRORS</td></tr>
<tr><td class="hl-num" data-line="133"></td><td>    <span class="hl-k">if</span> program is not found or its version is prior to expected version,</td></tr>
<tr><td class="hl-num" data-line="134"></td><td>    a message is written to error output.</td></tr>
<tr><td class="hl-num" data-line="135"></td><td></td></tr>
<tr><td class="hl-num" data-line="136"></td><td>EXIT VALUE</td></tr>
<tr><td class="hl-num" data-line="137"></td><td>    returns <span class="hl-c">0</span> <span class="hl-k">if</span> program version <span class="hl-k">if</span> greater equals than expected version,</td></tr>
<tr><td class="hl-num" data-line="138"></td><td>    returns <span class="hl-c">1</span> otherwise.</td></tr>
<tr><td class="hl-num" data-line="139"></td><td></td></tr>
<tr><td class="hl-num" data-line="140"></td><td>EXAMPLE</td></tr>
<tr><td class="hl-num" data-line="141"></td><td>    $ require_tool.sh emacs <span class="hl-c">23</span></td></tr>
<tr><td class="hl-num" data-line="142"></td><td>    $ CC=g++ require_tool.sh cc <span class="hl-c">4</span>.<span class="hl-c">6</span></td></tr>
<tr><td class="hl-num" data-line="143"></td><td>    $ require_tool.sh zsh <span class="hl-c">4</span>.<span class="hl-c">5</span></td></tr>
<tr><td class="hl-num" data-line="144"></td><td></td></tr>
<tr><td class="hl-num" data-line="145"></td><td><span class="hl-k">EOF</span></td></tr>
<tr><td class="hl-num" data-line="146"></td><td>}</td></tr>
<tr><td class="hl-num" data-line="147"></td><td></td></tr>
<tr><td class="hl-num" data-line="148"></td><td><span class="hl-k">for</span> arg <span class="hl-k">in</span> $@; <span class="hl-k">do</span></td></tr>
<tr><td class="hl-num" data-line="149"></td><td>    <span class="hl-k">case</span> $arg <span class="hl-k">in</span></td></tr>
<tr><td class="hl-num" data-line="150"></td><td>        <span class="hl-k">-h</span><span class="hl-k">|</span><span class="hl-k">-</span><span class="hl-k">-help</span>)</td></tr>
<tr><td class="hl-num" data-line="151"></td><td>            usage</td></tr>
<tr><td class="hl-num" data-line="152"></td><td>            <span class="hl-c">exit</span> <span class="hl-c">0</span></td></tr>
<tr><td class="hl-num" data-line="153"></td><td>            ;;</td></tr>
<tr><td class="hl-num" data-line="154"></td><td>    <span class="hl-k">esac</span></td></tr>
<tr><td class="hl-num" data-line="155"></td><td><span class="hl-k">done</span></td></tr>
<tr><td class="hl-num" data-line="156"></td><td><span class="hl-k">if</span> <span class="hl-k">[</span> $# <span class="hl-k">-gt</span> <span class="hl-c">2</span> <span class="hl-k">]</span> ; <span class="hl-k">then</span></td></tr>
<tr><td class="hl-num" data-line="157"></td><td>    <span class="hl-c">echo</span> <span class="hl-s">"ERROR: expecting 2 parameters. Please see option --help"</span></td></tr>
<tr><td class="hl-num" data-line="158"></td><td>    <span class="hl-c">exit</span> <span class="hl-c">1</span></td></tr>
<tr><td class="hl-num" data-line="159"></td><td><span class="hl-k">fi</span></td></tr>
<tr><td class="hl-num" data-line="160"></td><td></td></tr>
<tr><td class="hl-num" data-line="161"></td><td>require_tool $@</td></tr>
</tbody>
</table>