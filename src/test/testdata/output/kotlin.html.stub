<table class="highlight-table">
<tbody>
<tr><td class="hl-num" data-line="1"></td><td><span class="hl-cmt">/*</span></td></tr>
<tr><td class="hl-num" data-line="2"></td><td><span class="hl-cmt"> * Copyright 2017-2021 the original author or authors.</span></td></tr>
<tr><td class="hl-num" data-line="3"></td><td><span class="hl-cmt"> *</span></td></tr>
<tr><td class="hl-num" data-line="4"></td><td><span class="hl-cmt"> * Licensed under the Apache License, Version 2.0 (the "License");</span></td></tr>
<tr><td class="hl-num" data-line="5"></td><td><span class="hl-cmt"> * you may not use this file except in compliance with the License.</span></td></tr>
<tr><td class="hl-num" data-line="6"></td><td><span class="hl-cmt"> * You may obtain a copy of the License at</span></td></tr>
<tr><td class="hl-num" data-line="7"></td><td><span class="hl-cmt"> *</span></td></tr>
<tr><td class="hl-num" data-line="8"></td><td><span class="hl-cmt"> *      http://www.apache.org/licenses/LICENSE-2.0</span></td></tr>
<tr><td class="hl-num" data-line="9"></td><td><span class="hl-cmt"> *</span></td></tr>
<tr><td class="hl-num" data-line="10"></td><td><span class="hl-cmt"> * Unless required by applicable law or agreed to in writing, software</span></td></tr>
<tr><td class="hl-num" data-line="11"></td><td><span class="hl-cmt"> * distributed under the License is distributed on an "AS IS" BASIS,</span></td></tr>
<tr><td class="hl-num" data-line="12"></td><td><span class="hl-cmt"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></td></tr>
<tr><td class="hl-num" data-line="13"></td><td><span class="hl-cmt"> * See the License for the specific language governing permissions and</span></td></tr>
<tr><td class="hl-num" data-line="14"></td><td><span class="hl-cmt"> * limitations under the License.</span></td></tr>
<tr><td class="hl-num" data-line="15"></td><td><span class="hl-cmt"> */</span></td></tr>
<tr><td class="hl-num" data-line="16"></td><td><span class="hl-k">package</span> org.koin.core</td></tr>
<tr><td class="hl-num" data-line="17"></td><td></td></tr>
<tr><td class="hl-num" data-line="18"></td><td><span class="hl-k">import</span> org.koin.core.annotation.KoinInternalApi</td></tr>
<tr><td class="hl-num" data-line="19"></td><td><span class="hl-k">import</span> org.koin.core.error.ScopeNotCreatedException</td></tr>
<tr><td class="hl-num" data-line="20"></td><td><span class="hl-k">import</span> org.koin.core.logger.EmptyLogger</td></tr>
<tr><td class="hl-num" data-line="21"></td><td><span class="hl-k">import</span> org.koin.core.logger.Level</td></tr>
<tr><td class="hl-num" data-line="22"></td><td><span class="hl-k">import</span> org.koin.core.logger.Logger</td></tr>
<tr><td class="hl-num" data-line="23"></td><td><span class="hl-k">import</span> org.koin.core.module.Module</td></tr>
<tr><td class="hl-num" data-line="24"></td><td><span class="hl-k">import</span> org.koin.core.parameter.ParametersDefinition</td></tr>
<tr><td class="hl-num" data-line="25"></td><td><span class="hl-k">import</span> org.koin.core.qualifier.Qualifier</td></tr>
<tr><td class="hl-num" data-line="26"></td><td><span class="hl-k">import</span> org.koin.core.qualifier.TypeQualifier</td></tr>
<tr><td class="hl-num" data-line="27"></td><td><span class="hl-k">import</span> org.koin.core.registry.PropertyRegistry</td></tr>
<tr><td class="hl-num" data-line="28"></td><td><span class="hl-k">import</span> org.koin.core.registry.ScopeRegistry</td></tr>
<tr><td class="hl-num" data-line="29"></td><td><span class="hl-k">import</span> org.koin.core.component.KoinScopeComponent</td></tr>
<tr><td class="hl-num" data-line="30"></td><td><span class="hl-k">import</span> org.koin.core.scope.Scope</td></tr>
<tr><td class="hl-num" data-line="31"></td><td><span class="hl-k">import</span> org.koin.core.scope.ScopeID</td></tr>
<tr><td class="hl-num" data-line="32"></td><td><span class="hl-k">import</span> org.koin.core.component.getScopeId</td></tr>
<tr><td class="hl-num" data-line="33"></td><td><span class="hl-k">import</span> org.koin.core.component.getScopeName</td></tr>
<tr><td class="hl-num" data-line="34"></td><td><span class="hl-k">import</span> org.koin.core.registry.InstanceRegistry</td></tr>
<tr><td class="hl-num" data-line="35"></td><td><span class="hl-k">import</span> org.koin.core.time.measureDuration</td></tr>
<tr><td class="hl-num" data-line="36"></td><td><span class="hl-k">import</span> org.koin.mp.KoinPlatformTools</td></tr>
<tr><td class="hl-num" data-line="37"></td><td><span class="hl-k">import</span> kotlin.reflect.KClass</td></tr>
<tr><td class="hl-num" data-line="38"></td><td></td></tr>
<tr><td class="hl-num" data-line="39"></td><td><span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="40"></td><td><span class="hl-cmt"> * Koin</span></td></tr>
<tr><td class="hl-num" data-line="41"></td><td><span class="hl-cmt"> *</span></td></tr>
<tr><td class="hl-num" data-line="42"></td><td><span class="hl-cmt"> * Gather main features to use on Koin context</span></td></tr>
<tr><td class="hl-num" data-line="43"></td><td><span class="hl-cmt"> *</span></td></tr>
<tr><td class="hl-num" data-line="44"></td><td><span class="hl-cmt"> * @author Arnaud Giuliani</span></td></tr>
<tr><td class="hl-num" data-line="45"></td><td><span class="hl-cmt"> */</span></td></tr>
<tr><td class="hl-num" data-line="46"></td><td><span class="hl-k">@OptIn</span>(<span class="hl-v">KoinInternalApi</span>::<span class="hl-k">class</span>)</td></tr>
<tr><td class="hl-num" data-line="47"></td><td><span class="hl-k">class</span> <span class="hl-c">Koin</span> {</td></tr>
<tr><td class="hl-num" data-line="48"></td><td>    <span class="hl-k">@KoinInternalApi</span></td></tr>
<tr><td class="hl-num" data-line="49"></td><td>    <span class="hl-k">val</span> <span class="hl-v">scopeRegistry</span> = <span class="hl-en">ScopeRegistry</span>(<span class="hl-c">this</span>)</td></tr>
<tr><td class="hl-num" data-line="50"></td><td></td></tr>
<tr><td class="hl-num" data-line="51"></td><td>    <span class="hl-k">@KoinInternalApi</span></td></tr>
<tr><td class="hl-num" data-line="52"></td><td>    <span class="hl-k">val</span> <span class="hl-v">instanceRegistry</span> = <span class="hl-en">InstanceRegistry</span>(<span class="hl-c">this</span>)</td></tr>
<tr><td class="hl-num" data-line="53"></td><td></td></tr>
<tr><td class="hl-num" data-line="54"></td><td>    <span class="hl-k">@KoinInternalApi</span></td></tr>
<tr><td class="hl-num" data-line="55"></td><td>    <span class="hl-k">val</span> <span class="hl-v">propertyRegistry</span> = <span class="hl-en">PropertyRegistry</span>(<span class="hl-c">this</span>)</td></tr>
<tr><td class="hl-num" data-line="56"></td><td></td></tr>
<tr><td class="hl-num" data-line="57"></td><td>    <span class="hl-k">var</span> <span class="hl-v">logger</span>: <span class="hl-v">Logger</span> = <span class="hl-en">EmptyLogger</span>()</td></tr>
<tr><td class="hl-num" data-line="58"></td><td>        <span class="hl-k">private</span> <span class="hl-k">set</span></td></tr>
<tr><td class="hl-num" data-line="59"></td><td></td></tr>
<tr><td class="hl-num" data-line="60"></td><td>    <span class="hl-k">@KoinInternalApi</span></td></tr>
<tr><td class="hl-num" data-line="61"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">setupLogger</span>(<span class="hl-v">logger</span>: <span class="hl-c">Logger</span>) {</td></tr>
<tr><td class="hl-num" data-line="62"></td><td>        <span class="hl-c">this</span>.<span class="hl-v">logger</span> = logger</td></tr>
<tr><td class="hl-num" data-line="63"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="64"></td><td></td></tr>
<tr><td class="hl-num" data-line="65"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="66"></td><td><span class="hl-cmt">     * Lazy inject a Koin instance</span></td></tr>
<tr><td class="hl-num" data-line="67"></td><td><span class="hl-cmt">     * @param qualifier</span></td></tr>
<tr><td class="hl-num" data-line="68"></td><td><span class="hl-cmt">     * @param scope</span></td></tr>
<tr><td class="hl-num" data-line="69"></td><td><span class="hl-cmt">     * @param parameters</span></td></tr>
<tr><td class="hl-num" data-line="70"></td><td><span class="hl-cmt">     *</span></td></tr>
<tr><td class="hl-num" data-line="71"></td><td><span class="hl-cmt">     * @return Lazy instance of type T</span></td></tr>
<tr><td class="hl-num" data-line="72"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="73"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-v">T</span> : <span class="hl-c">Any</span>> <span class="hl-en">inject</span>(</td></tr>
<tr><td class="hl-num" data-line="74"></td><td>            <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>? = <span class="hl-c">null</span>,</td></tr>
<tr><td class="hl-num" data-line="75"></td><td>            <span class="hl-v">mode</span>: <span class="hl-v">LazyThreadSafetyMode</span> = KoinPlatformTools.<span class="hl-en">defaultLazyMode</span>(),</td></tr>
<tr><td class="hl-num" data-line="76"></td><td>            <span class="hl-k">noinline</span> <span class="hl-v">parameters</span>: <span class="hl-c">ParametersDefinition</span>? = <span class="hl-c">null</span></td></tr>
<tr><td class="hl-num" data-line="77"></td><td>    ): <span class="hl-c">Lazy</span>&lt;<span class="hl-c">T</span>> = scopeRegistry.rootScope.<span class="hl-en">inject</span>(<span class="hl-c">qualifier</span>, <span class="hl-c">mode</span>, <span class="hl-c">parameters</span>)</td></tr>
<tr><td class="hl-num" data-line="78"></td><td></td></tr>
<tr><td class="hl-num" data-line="79"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="80"></td><td><span class="hl-cmt">     * Lazy inject a Koin instance if available</span></td></tr>
<tr><td class="hl-num" data-line="81"></td><td><span class="hl-cmt">     * @param qualifier</span></td></tr>
<tr><td class="hl-num" data-line="82"></td><td><span class="hl-cmt">     * @param scope</span></td></tr>
<tr><td class="hl-num" data-line="83"></td><td><span class="hl-cmt">     * @param parameters</span></td></tr>
<tr><td class="hl-num" data-line="84"></td><td><span class="hl-cmt">     *</span></td></tr>
<tr><td class="hl-num" data-line="85"></td><td><span class="hl-cmt">     * @return Lazy instance of type T or null</span></td></tr>
<tr><td class="hl-num" data-line="86"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="87"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-v">T</span> : <span class="hl-c">Any</span>> <span class="hl-en">injectOrNull</span>(</td></tr>
<tr><td class="hl-num" data-line="88"></td><td>            <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>? = <span class="hl-c">null</span>,</td></tr>
<tr><td class="hl-num" data-line="89"></td><td>            <span class="hl-v">mode</span>: <span class="hl-v">LazyThreadSafetyMode</span> = KoinPlatformTools.<span class="hl-en">defaultLazyMode</span>(),</td></tr>
<tr><td class="hl-num" data-line="90"></td><td>            <span class="hl-k">noinline</span> <span class="hl-v">parameters</span>: <span class="hl-c">ParametersDefinition</span>? = <span class="hl-c">null</span></td></tr>
<tr><td class="hl-num" data-line="91"></td><td>    ): <span class="hl-c">Lazy</span>&lt;<span class="hl-c">T</span>?> = scopeRegistry.rootScope.<span class="hl-en">injectOrNull</span>(<span class="hl-c">qualifier</span>, <span class="hl-c">mode</span>, <span class="hl-c">parameters</span>)</td></tr>
<tr><td class="hl-num" data-line="92"></td><td></td></tr>
<tr><td class="hl-num" data-line="93"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="94"></td><td><span class="hl-cmt">     * Get a Koin instance</span></td></tr>
<tr><td class="hl-num" data-line="95"></td><td><span class="hl-cmt">     * @param qualifier</span></td></tr>
<tr><td class="hl-num" data-line="96"></td><td><span class="hl-cmt">     * @param scope</span></td></tr>
<tr><td class="hl-num" data-line="97"></td><td><span class="hl-cmt">     * @param parameters</span></td></tr>
<tr><td class="hl-num" data-line="98"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="99"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-v">T</span> : <span class="hl-c">Any</span>> <span class="hl-k">get</span>(</td></tr>
<tr><td class="hl-num" data-line="100"></td><td>            <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>? = <span class="hl-c">null</span>,</td></tr>
<tr><td class="hl-num" data-line="101"></td><td>            <span class="hl-k">noinline</span> <span class="hl-v">parameters</span>: <span class="hl-c">ParametersDefinition</span>? = <span class="hl-c">null</span></td></tr>
<tr><td class="hl-num" data-line="102"></td><td>    ): <span class="hl-v">T</span> = scopeRegistry.rootScope.<span class="hl-k">get</span>(<span class="hl-c">qualifier</span>, <span class="hl-c">parameters</span>)</td></tr>
<tr><td class="hl-num" data-line="103"></td><td></td></tr>
<tr><td class="hl-num" data-line="104"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="105"></td><td><span class="hl-cmt">     * Get a Koin instance if available</span></td></tr>
<tr><td class="hl-num" data-line="106"></td><td><span class="hl-cmt">     * @param qualifier</span></td></tr>
<tr><td class="hl-num" data-line="107"></td><td><span class="hl-cmt">     * @param scope</span></td></tr>
<tr><td class="hl-num" data-line="108"></td><td><span class="hl-cmt">     * @param parameters</span></td></tr>
<tr><td class="hl-num" data-line="109"></td><td><span class="hl-cmt">     *</span></td></tr>
<tr><td class="hl-num" data-line="110"></td><td><span class="hl-cmt">     * @return instance of type T or null</span></td></tr>
<tr><td class="hl-num" data-line="111"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="112"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-v">T</span> : <span class="hl-c">Any</span>> <span class="hl-en">getOrNull</span>(</td></tr>
<tr><td class="hl-num" data-line="113"></td><td>            <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>? = <span class="hl-c">null</span>,</td></tr>
<tr><td class="hl-num" data-line="114"></td><td>            <span class="hl-k">noinline</span> <span class="hl-v">parameters</span>: <span class="hl-c">ParametersDefinition</span>? = <span class="hl-c">null</span></td></tr>
<tr><td class="hl-num" data-line="115"></td><td>    ): <span class="hl-c">T</span>? = scopeRegistry.rootScope.<span class="hl-en">getOrNull</span>(<span class="hl-c">qualifier</span>, <span class="hl-c">parameters</span>)</td></tr>
<tr><td class="hl-num" data-line="116"></td><td></td></tr>
<tr><td class="hl-num" data-line="117"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="118"></td><td><span class="hl-cmt">     * Get a Koin instance</span></td></tr>
<tr><td class="hl-num" data-line="119"></td><td><span class="hl-cmt">     * @param clazz</span></td></tr>
<tr><td class="hl-num" data-line="120"></td><td><span class="hl-cmt">     * @param qualifier</span></td></tr>
<tr><td class="hl-num" data-line="121"></td><td><span class="hl-cmt">     * @param scope</span></td></tr>
<tr><td class="hl-num" data-line="122"></td><td><span class="hl-cmt">     * @param parameters</span></td></tr>
<tr><td class="hl-num" data-line="123"></td><td><span class="hl-cmt">     *</span></td></tr>
<tr><td class="hl-num" data-line="124"></td><td><span class="hl-cmt">     * @return instance of type T</span></td></tr>
<tr><td class="hl-num" data-line="125"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="126"></td><td>    <span class="hl-k">fun</span> &lt;<span class="hl-c">T</span>> <span class="hl-k">get</span>(</td></tr>
<tr><td class="hl-num" data-line="127"></td><td>            <span class="hl-v">clazz</span>: KClass&lt;*>,</td></tr>
<tr><td class="hl-num" data-line="128"></td><td>            <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>? = <span class="hl-c">null</span>,</td></tr>
<tr><td class="hl-num" data-line="129"></td><td>            <span class="hl-v">parameters</span>: <span class="hl-c">ParametersDefinition</span>? = <span class="hl-c">null</span></td></tr>
<tr><td class="hl-num" data-line="130"></td><td>    ): <span class="hl-v">T</span> = scopeRegistry.rootScope.<span class="hl-k">get</span>(<span class="hl-c">clazz</span>, <span class="hl-c">qualifier</span>, <span class="hl-c">parameters</span>)</td></tr>
<tr><td class="hl-num" data-line="131"></td><td></td></tr>
<tr><td class="hl-num" data-line="132"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="133"></td><td><span class="hl-cmt">     * Get a Koin instance if available</span></td></tr>
<tr><td class="hl-num" data-line="134"></td><td><span class="hl-cmt">     * @param clazz</span></td></tr>
<tr><td class="hl-num" data-line="135"></td><td><span class="hl-cmt">     * @param qualifier</span></td></tr>
<tr><td class="hl-num" data-line="136"></td><td><span class="hl-cmt">     * @param scope</span></td></tr>
<tr><td class="hl-num" data-line="137"></td><td><span class="hl-cmt">     * @param parameters</span></td></tr>
<tr><td class="hl-num" data-line="138"></td><td><span class="hl-cmt">     *</span></td></tr>
<tr><td class="hl-num" data-line="139"></td><td><span class="hl-cmt">     * @return instance of type T or null</span></td></tr>
<tr><td class="hl-num" data-line="140"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="141"></td><td>    <span class="hl-k">fun</span> &lt;<span class="hl-c">T</span>> <span class="hl-en">getOrNull</span>(</td></tr>
<tr><td class="hl-num" data-line="142"></td><td>            <span class="hl-v">clazz</span>: KClass&lt;*>,</td></tr>
<tr><td class="hl-num" data-line="143"></td><td>            <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>? = <span class="hl-c">null</span>,</td></tr>
<tr><td class="hl-num" data-line="144"></td><td>            <span class="hl-v">parameters</span>: <span class="hl-c">ParametersDefinition</span>? = <span class="hl-c">null</span></td></tr>
<tr><td class="hl-num" data-line="145"></td><td>    ): <span class="hl-c">T</span>? = scopeRegistry.rootScope.<span class="hl-en">getOrNull</span>(<span class="hl-c">clazz</span>, <span class="hl-c">qualifier</span>, <span class="hl-c">parameters</span>)</td></tr>
<tr><td class="hl-num" data-line="146"></td><td></td></tr>
<tr><td class="hl-num" data-line="147"></td><td></td></tr>
<tr><td class="hl-num" data-line="148"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="149"></td><td><span class="hl-cmt">     * Declare a component definition from the given instance</span></td></tr>
<tr><td class="hl-num" data-line="150"></td><td><span class="hl-cmt">     * This result of declaring a single definition of type T, returning the given instance</span></td></tr>
<tr><td class="hl-num" data-line="151"></td><td><span class="hl-cmt">     *</span></td></tr>
<tr><td class="hl-num" data-line="152"></td><td><span class="hl-cmt">     * @param instance The instance you're declaring.</span></td></tr>
<tr><td class="hl-num" data-line="153"></td><td><span class="hl-cmt">     * @param qualifier Qualifier for this declaration</span></td></tr>
<tr><td class="hl-num" data-line="154"></td><td><span class="hl-cmt">     * @param secondaryTypes List of secondary bound types</span></td></tr>
<tr><td class="hl-num" data-line="155"></td><td><span class="hl-cmt">     * @param allowOverride Allows to override a previous declaration of the same type (default to true).</span></td></tr>
<tr><td class="hl-num" data-line="156"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="157"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-c">T</span>> <span class="hl-en">declare</span>(</td></tr>
<tr><td class="hl-num" data-line="158"></td><td>            <span class="hl-v">instance</span>: <span class="hl-c">T</span>,</td></tr>
<tr><td class="hl-num" data-line="159"></td><td>            <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>? = <span class="hl-c">null</span>,</td></tr>
<tr><td class="hl-num" data-line="160"></td><td>            <span class="hl-v">secondaryTypes</span>: <span class="hl-c">List</span>&lt;<span class="hl-c">KClass</span>&lt;*>> = <span class="hl-en">emptyList</span>(),</td></tr>
<tr><td class="hl-num" data-line="161"></td><td>            <span class="hl-v">allowOverride</span>: <span class="hl-c">Boolean</span> = <span class="hl-c">true</span></td></tr>
<tr><td class="hl-num" data-line="162"></td><td>    ) {</td></tr>
<tr><td class="hl-num" data-line="163"></td><td>        <span class="hl-k">val</span> <span class="hl-v">firstType</span> = <span class="hl-en">listOf</span>(<span class="hl-v">T</span>::<span class="hl-k">class</span>)</td></tr>
<tr><td class="hl-num" data-line="164"></td><td>        scopeRegistry.rootScope.<span class="hl-en">declare</span>(<span class="hl-c">instance</span>, <span class="hl-c">qualifier</span>, firstType + <span class="hl-c">secondaryTypes</span>, <span class="hl-c">allowOverride</span>)</td></tr>
<tr><td class="hl-num" data-line="165"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="166"></td><td></td></tr>
<tr><td class="hl-num" data-line="167"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="168"></td><td><span class="hl-cmt">     * Get a all instance for given inferred class (in primary or secondary type)</span></td></tr>
<tr><td class="hl-num" data-line="169"></td><td><span class="hl-cmt">     *</span></td></tr>
<tr><td class="hl-num" data-line="170"></td><td><span class="hl-cmt">     * @return list of instances of type T</span></td></tr>
<tr><td class="hl-num" data-line="171"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="172"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-c">T</span>> <span class="hl-en">getAll</span>(): <span class="hl-c">List</span>&lt;<span class="hl-c">T</span>> = scopeRegistry.rootScope.<span class="hl-en">getAll</span>()</td></tr>
<tr><td class="hl-num" data-line="173"></td><td></td></tr>
<tr><td class="hl-num" data-line="174"></td><td><span class="hl-cmt">//    /**</span></td></tr>
<tr><td class="hl-num" data-line="175"></td><td><span class="hl-cmt">//     * Get instance of primary type P and secondary type S</span></td></tr>
<tr><td class="hl-num" data-line="176"></td><td><span class="hl-cmt">//     * (not for scoped instances)</span></td></tr>
<tr><td class="hl-num" data-line="177"></td><td><span class="hl-cmt">//     *</span></td></tr>
<tr><td class="hl-num" data-line="178"></td><td><span class="hl-cmt">//     * @return instance of type S</span></td></tr>
<tr><td class="hl-num" data-line="179"></td><td><span class="hl-cmt">//     */</span></td></tr>
<tr><td class="hl-num" data-line="180"></td><td><span class="hl-cmt">//    inline fun &lt;reified S, reified P&gt; bind(noinline parameters: ParametersDefinition? = null): S =</span></td></tr>
<tr><td class="hl-num" data-line="181"></td><td><span class="hl-cmt">//            scopeRegistry.rootScope.bind&lt;S, P&gt;(parameters)</span></td></tr>
<tr><td class="hl-num" data-line="182"></td><td><span class="hl-cmt">//</span></td></tr>
<tr><td class="hl-num" data-line="183"></td><td><span class="hl-cmt">//    /**</span></td></tr>
<tr><td class="hl-num" data-line="184"></td><td><span class="hl-cmt">//     * Get instance of primary type P and secondary type S</span></td></tr>
<tr><td class="hl-num" data-line="185"></td><td><span class="hl-cmt">//     * (not for scoped instances)</span></td></tr>
<tr><td class="hl-num" data-line="186"></td><td><span class="hl-cmt">//     *</span></td></tr>
<tr><td class="hl-num" data-line="187"></td><td><span class="hl-cmt">//     * @return instance of type S</span></td></tr>
<tr><td class="hl-num" data-line="188"></td><td><span class="hl-cmt">//     */</span></td></tr>
<tr><td class="hl-num" data-line="189"></td><td><span class="hl-cmt">//    fun &lt;S&gt; bind(</span></td></tr>
<tr><td class="hl-num" data-line="190"></td><td><span class="hl-cmt">//            primaryType: KClass&lt;*&gt;,</span></td></tr>
<tr><td class="hl-num" data-line="191"></td><td><span class="hl-cmt">//            secondaryType: KClass&lt;*&gt;,</span></td></tr>
<tr><td class="hl-num" data-line="192"></td><td><span class="hl-cmt">//            parameters: ParametersDefinition? = null</span></td></tr>
<tr><td class="hl-num" data-line="193"></td><td><span class="hl-cmt">//    ): S = scopeRegistry.rootScope.bind(primaryType, secondaryType, parameters)</span></td></tr>
<tr><td class="hl-num" data-line="194"></td><td></td></tr>
<tr><td class="hl-num" data-line="195"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="196"></td><td><span class="hl-cmt">     * Create a Scope instance</span></td></tr>
<tr><td class="hl-num" data-line="197"></td><td><span class="hl-cmt">     * @param scopeId</span></td></tr>
<tr><td class="hl-num" data-line="198"></td><td><span class="hl-cmt">     * @param scopeDefinitionName</span></td></tr>
<tr><td class="hl-num" data-line="199"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="200"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">createScope</span>(<span class="hl-v">scopeId</span>: <span class="hl-c">ScopeID</span>, <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>, <span class="hl-v">source</span>: <span class="hl-c">Any</span>? = <span class="hl-c">null</span>): <span class="hl-c">Scope</span> {</td></tr>
<tr><td class="hl-num" data-line="201"></td><td>        logger.<span class="hl-en">log</span>(Level.<span class="hl-c">DEBUG</span>) { <span class="hl-s">"|- create scope - id:'$scopeId' q:$qualifier"</span> }</td></tr>
<tr><td class="hl-num" data-line="202"></td><td>        <span class="hl-k">return</span> scopeRegistry.<span class="hl-en">createScope</span>(<span class="hl-c">scopeId</span>, <span class="hl-c">qualifier</span>, <span class="hl-c">source</span>)</td></tr>
<tr><td class="hl-num" data-line="203"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="204"></td><td></td></tr>
<tr><td class="hl-num" data-line="205"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="206"></td><td><span class="hl-cmt">     * Create a Scope instance</span></td></tr>
<tr><td class="hl-num" data-line="207"></td><td><span class="hl-cmt">     * @param scopeId</span></td></tr>
<tr><td class="hl-num" data-line="208"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="209"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-v">T</span> : <span class="hl-c">Any</span>> <span class="hl-en">createScope</span>(<span class="hl-v">scopeId</span>: <span class="hl-c">ScopeID</span>, <span class="hl-v">source</span>: <span class="hl-c">Any</span>? = <span class="hl-c">null</span>): <span class="hl-c">Scope</span> {</td></tr>
<tr><td class="hl-num" data-line="210"></td><td>        <span class="hl-k">val</span> <span class="hl-v">qualifier</span> = <span class="hl-en">TypeQualifier</span>(<span class="hl-v">T</span>::<span class="hl-k">class</span>)</td></tr>
<tr><td class="hl-num" data-line="211"></td><td>        logger.<span class="hl-en">log</span>(Level.<span class="hl-c">DEBUG</span>) {<span class="hl-s">"|- create scope - id:'$scopeId' q:$qualifier"</span>}</td></tr>
<tr><td class="hl-num" data-line="212"></td><td>        <span class="hl-k">return</span> scopeRegistry.<span class="hl-en">createScope</span>(<span class="hl-c">scopeId</span>, <span class="hl-c">qualifier</span>, <span class="hl-c">source</span>)</td></tr>
<tr><td class="hl-num" data-line="213"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="214"></td><td></td></tr>
<tr><td class="hl-num" data-line="215"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="216"></td><td><span class="hl-cmt">     * Create a Scope instance</span></td></tr>
<tr><td class="hl-num" data-line="217"></td><td><span class="hl-cmt">     * @param scopeDefinitionName</span></td></tr>
<tr><td class="hl-num" data-line="218"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="219"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-v">T</span> : <span class="hl-c">Any</span>> <span class="hl-en">createScope</span>(<span class="hl-v">scopeId</span>: <span class="hl-v">ScopeID</span> = KoinPlatformTools.<span class="hl-en">generateId</span>()): <span class="hl-c">Scope</span> {</td></tr>
<tr><td class="hl-num" data-line="220"></td><td>        <span class="hl-k">val</span> <span class="hl-v">qualifier</span> = <span class="hl-en">TypeQualifier</span>(<span class="hl-v">T</span>::<span class="hl-k">class</span>)</td></tr>
<tr><td class="hl-num" data-line="221"></td><td>        logger.<span class="hl-en">log</span>(Level.<span class="hl-c">DEBUG</span>) {<span class="hl-s">"|- create scope - id:'$scopeId' q:$qualifier"</span> }</td></tr>
<tr><td class="hl-num" data-line="222"></td><td>        <span class="hl-k">return</span> scopeRegistry.<span class="hl-en">createScope</span>(<span class="hl-c">scopeId</span>, <span class="hl-c">qualifier</span>, <span class="hl-c">null</span>)</td></tr>
<tr><td class="hl-num" data-line="223"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="224"></td><td></td></tr>
<tr><td class="hl-num" data-line="225"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="226"></td><td><span class="hl-cmt">     * Create a Scope instance</span></td></tr>
<tr><td class="hl-num" data-line="227"></td><td><span class="hl-cmt">     * @param scopeDefinitionName</span></td></tr>
<tr><td class="hl-num" data-line="228"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="229"></td><td>    <span class="hl-k">fun</span> &lt;<span class="hl-c">T</span> : <span class="hl-c">KoinScopeComponent</span>> <span class="hl-en">createScope</span>(<span class="hl-v">t</span>: <span class="hl-c">T</span>): <span class="hl-c">Scope</span> {</td></tr>
<tr><td class="hl-num" data-line="230"></td><td>        <span class="hl-k">val</span> <span class="hl-v">scopeId</span> = t.<span class="hl-en">getScopeId</span>()</td></tr>
<tr><td class="hl-num" data-line="231"></td><td>        <span class="hl-k">val</span> <span class="hl-v">qualifier</span> = t.<span class="hl-en">getScopeName</span>()</td></tr>
<tr><td class="hl-num" data-line="232"></td><td>        logger.<span class="hl-en">log</span>(Level.<span class="hl-c">DEBUG</span>) {<span class="hl-s">"|- create scope - id:'$scopeId' q:$qualifier"</span> }</td></tr>
<tr><td class="hl-num" data-line="233"></td><td>        <span class="hl-k">return</span> scopeRegistry.<span class="hl-en">createScope</span>(<span class="hl-c">scopeId</span>, <span class="hl-c">qualifier</span>, <span class="hl-c">null</span>)</td></tr>
<tr><td class="hl-num" data-line="234"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="235"></td><td></td></tr>
<tr><td class="hl-num" data-line="236"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="237"></td><td><span class="hl-cmt">     * Get or Create a Scope instance</span></td></tr>
<tr><td class="hl-num" data-line="238"></td><td><span class="hl-cmt">     * @param scopeId</span></td></tr>
<tr><td class="hl-num" data-line="239"></td><td><span class="hl-cmt">     * @param qualifier</span></td></tr>
<tr><td class="hl-num" data-line="240"></td><td><span class="hl-cmt">     * @param source</span></td></tr>
<tr><td class="hl-num" data-line="241"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="242"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">getOrCreateScope</span>(<span class="hl-v">scopeId</span>: <span class="hl-c">ScopeID</span>, <span class="hl-v">qualifier</span>: <span class="hl-c">Qualifier</span>, <span class="hl-v">source</span>: <span class="hl-c">Any</span>? = <span class="hl-c">null</span>): <span class="hl-c">Scope</span> {</td></tr>
<tr><td class="hl-num" data-line="243"></td><td>        <span class="hl-k">return</span> scopeRegistry.<span class="hl-en">getScopeOrNull</span>(<span class="hl-c">scopeId</span>) ?: <span class="hl-en">createScope</span>(<span class="hl-c">scopeId</span>, <span class="hl-c">qualifier</span>, <span class="hl-c">source</span>)</td></tr>
<tr><td class="hl-num" data-line="244"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="245"></td><td></td></tr>
<tr><td class="hl-num" data-line="246"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="247"></td><td><span class="hl-cmt">     * Get or Create a Scope instance</span></td></tr>
<tr><td class="hl-num" data-line="248"></td><td><span class="hl-cmt">     * @param scopeId</span></td></tr>
<tr><td class="hl-num" data-line="249"></td><td><span class="hl-cmt">     * @param qualifier</span></td></tr>
<tr><td class="hl-num" data-line="250"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="251"></td><td>    <span class="hl-k">inline</span> <span class="hl-k">fun</span> &lt;<span class="hl-c">reified</span> <span class="hl-v">T</span> : <span class="hl-c">Any</span>> <span class="hl-en">getOrCreateScope</span>(<span class="hl-v">scopeId</span>: <span class="hl-c">ScopeID</span>): <span class="hl-c">Scope</span> {</td></tr>
<tr><td class="hl-num" data-line="252"></td><td>        <span class="hl-k">val</span> <span class="hl-v">qualifier</span> = <span class="hl-en">TypeQualifier</span>(<span class="hl-v">T</span>::<span class="hl-k">class</span>)</td></tr>
<tr><td class="hl-num" data-line="253"></td><td>        <span class="hl-k">return</span> scopeRegistry.<span class="hl-en">getScopeOrNull</span>(<span class="hl-c">scopeId</span>) ?: <span class="hl-en">createScope</span>(<span class="hl-c">scopeId</span>, <span class="hl-c">qualifier</span>)</td></tr>
<tr><td class="hl-num" data-line="254"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="255"></td><td></td></tr>
<tr><td class="hl-num" data-line="256"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="257"></td><td><span class="hl-cmt">     * get a scope instance</span></td></tr>
<tr><td class="hl-num" data-line="258"></td><td><span class="hl-cmt">     * @param scopeId</span></td></tr>
<tr><td class="hl-num" data-line="259"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="260"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">getScope</span>(<span class="hl-v">scopeId</span>: <span class="hl-c">ScopeID</span>): <span class="hl-c">Scope</span> {</td></tr>
<tr><td class="hl-num" data-line="261"></td><td>        <span class="hl-k">return</span> scopeRegistry.<span class="hl-en">getScopeOrNull</span>(<span class="hl-c">scopeId</span>)</td></tr>
<tr><td class="hl-num" data-line="262"></td><td>                ?: <span class="hl-k">throw</span> <span class="hl-en">ScopeNotCreatedException</span>(<span class="hl-s">"No scope found for id '$scopeId'"</span>)</td></tr>
<tr><td class="hl-num" data-line="263"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="264"></td><td></td></tr>
<tr><td class="hl-num" data-line="265"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="266"></td><td><span class="hl-cmt">     * get a scope instance</span></td></tr>
<tr><td class="hl-num" data-line="267"></td><td><span class="hl-cmt">     * @param scopeId</span></td></tr>
<tr><td class="hl-num" data-line="268"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="269"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">getScopeOrNull</span>(<span class="hl-v">scopeId</span>: <span class="hl-c">ScopeID</span>): <span class="hl-c">Scope</span>? {</td></tr>
<tr><td class="hl-num" data-line="270"></td><td>        <span class="hl-k">return</span> scopeRegistry.<span class="hl-en">getScopeOrNull</span>(<span class="hl-c">scopeId</span>)</td></tr>
<tr><td class="hl-num" data-line="271"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="272"></td><td></td></tr>
<tr><td class="hl-num" data-line="273"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="274"></td><td><span class="hl-cmt">     * Delete a scope instance</span></td></tr>
<tr><td class="hl-num" data-line="275"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="276"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">deleteScope</span>(<span class="hl-v">scopeId</span>: <span class="hl-c">ScopeID</span>) {</td></tr>
<tr><td class="hl-num" data-line="277"></td><td>        scopeRegistry.<span class="hl-en">deleteScope</span>(<span class="hl-c">scopeId</span>)</td></tr>
<tr><td class="hl-num" data-line="278"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="279"></td><td></td></tr>
<tr><td class="hl-num" data-line="280"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="281"></td><td><span class="hl-cmt">     * Retrieve a property</span></td></tr>
<tr><td class="hl-num" data-line="282"></td><td><span class="hl-cmt">     * @param key</span></td></tr>
<tr><td class="hl-num" data-line="283"></td><td><span class="hl-cmt">     * @param defaultValue</span></td></tr>
<tr><td class="hl-num" data-line="284"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="285"></td><td>    <span class="hl-k">fun</span> &lt;<span class="hl-c">T</span> : <span class="hl-c">Any</span>> <span class="hl-en">getProperty</span>(<span class="hl-v">key</span>: <span class="hl-c">String</span>, <span class="hl-v">defaultValue</span>: <span class="hl-c">T</span>): <span class="hl-c">T</span> {</td></tr>
<tr><td class="hl-num" data-line="286"></td><td>        <span class="hl-k">return</span> propertyRegistry.<span class="hl-en">getProperty</span>(<span class="hl-c">key</span>) ?: defaultValue</td></tr>
<tr><td class="hl-num" data-line="287"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="288"></td><td></td></tr>
<tr><td class="hl-num" data-line="289"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="290"></td><td><span class="hl-cmt">     * Retrieve a property</span></td></tr>
<tr><td class="hl-num" data-line="291"></td><td><span class="hl-cmt">     * @param key</span></td></tr>
<tr><td class="hl-num" data-line="292"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="293"></td><td>    <span class="hl-k">fun</span> &lt;<span class="hl-c">T</span> : <span class="hl-c">Any</span>> <span class="hl-en">getProperty</span>(<span class="hl-v">key</span>: <span class="hl-c">String</span>): <span class="hl-c">T</span>? {</td></tr>
<tr><td class="hl-num" data-line="294"></td><td>        <span class="hl-k">return</span> propertyRegistry.<span class="hl-en">getProperty</span>(<span class="hl-c">key</span>)</td></tr>
<tr><td class="hl-num" data-line="295"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="296"></td><td></td></tr>
<tr><td class="hl-num" data-line="297"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="298"></td><td><span class="hl-cmt">     * Save a property</span></td></tr>
<tr><td class="hl-num" data-line="299"></td><td><span class="hl-cmt">     * @param key</span></td></tr>
<tr><td class="hl-num" data-line="300"></td><td><span class="hl-cmt">     * @param value</span></td></tr>
<tr><td class="hl-num" data-line="301"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="302"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">setProperty</span>(<span class="hl-v">key</span>: <span class="hl-c">String</span>, <span class="hl-v">value</span>: <span class="hl-c">Any</span>) {</td></tr>
<tr><td class="hl-num" data-line="303"></td><td>        propertyRegistry.<span class="hl-en">saveProperty</span>(<span class="hl-c">key</span>, <span class="hl-c">value</span>)</td></tr>
<tr><td class="hl-num" data-line="304"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="305"></td><td></td></tr>
<tr><td class="hl-num" data-line="306"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="307"></td><td><span class="hl-cmt">     * Delete a property</span></td></tr>
<tr><td class="hl-num" data-line="308"></td><td><span class="hl-cmt">     * @param key</span></td></tr>
<tr><td class="hl-num" data-line="309"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="310"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">deleteProperty</span>(<span class="hl-v">key</span>: <span class="hl-c">String</span>) {</td></tr>
<tr><td class="hl-num" data-line="311"></td><td>        propertyRegistry.<span class="hl-en">deleteProperty</span>(<span class="hl-c">key</span>)</td></tr>
<tr><td class="hl-num" data-line="312"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="313"></td><td></td></tr>
<tr><td class="hl-num" data-line="314"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="315"></td><td><span class="hl-cmt">     * Close all resources from context</span></td></tr>
<tr><td class="hl-num" data-line="316"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="317"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">close</span>() {</td></tr>
<tr><td class="hl-num" data-line="318"></td><td>        scopeRegistry.<span class="hl-en">close</span>()</td></tr>
<tr><td class="hl-num" data-line="319"></td><td>        instanceRegistry.<span class="hl-en">close</span>()</td></tr>
<tr><td class="hl-num" data-line="320"></td><td>        propertyRegistry.<span class="hl-en">close</span>()</td></tr>
<tr><td class="hl-num" data-line="321"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="322"></td><td></td></tr>
<tr><td class="hl-num" data-line="323"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="324"></td><td><span class="hl-cmt">     * Load module & create eager instances</span></td></tr>
<tr><td class="hl-num" data-line="325"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="326"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">loadModules</span>(<span class="hl-v">modules</span>: <span class="hl-c">List</span>&lt;<span class="hl-c">Module</span>>, <span class="hl-v">allowOverride</span> : <span class="hl-c">Boolean</span> = <span class="hl-c">true</span>) {</td></tr>
<tr><td class="hl-num" data-line="327"></td><td>        instanceRegistry.<span class="hl-en">loadModules</span>(<span class="hl-c">modules</span>, <span class="hl-c">allowOverride</span>)</td></tr>
<tr><td class="hl-num" data-line="328"></td><td>        scopeRegistry.<span class="hl-en">loadScopes</span>(<span class="hl-c">modules</span>)</td></tr>
<tr><td class="hl-num" data-line="329"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="330"></td><td></td></tr>
<tr><td class="hl-num" data-line="331"></td><td></td></tr>
<tr><td class="hl-num" data-line="332"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">unloadModules</span>(<span class="hl-v">modules</span>: <span class="hl-c">List</span>&lt;<span class="hl-c">Module</span>>) {</td></tr>
<tr><td class="hl-num" data-line="333"></td><td>        instanceRegistry.<span class="hl-en">unloadModules</span>(<span class="hl-c">modules</span>)</td></tr>
<tr><td class="hl-num" data-line="334"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="335"></td><td></td></tr>
<tr><td class="hl-num" data-line="336"></td><td>    <span class="hl-cmt">/**</span></td></tr>
<tr><td class="hl-num" data-line="337"></td><td><span class="hl-cmt">     * Create Single instances Definitions marked as createdAtStart</span></td></tr>
<tr><td class="hl-num" data-line="338"></td><td><span class="hl-cmt">     */</span></td></tr>
<tr><td class="hl-num" data-line="339"></td><td>    <span class="hl-k">fun</span> <span class="hl-en">createEagerInstances</span>(){</td></tr>
<tr><td class="hl-num" data-line="340"></td><td>        logger.<span class="hl-en">info</span>(<span class="hl-s">"create eager instances ..."</span>)</td></tr>
<tr><td class="hl-num" data-line="341"></td><td>        <span class="hl-k">if</span> (logger.<span class="hl-en">isAt</span>(Level.<span class="hl-c">DEBUG</span>)) {</td></tr>
<tr><td class="hl-num" data-line="342"></td><td>            <span class="hl-k">val</span> <span class="hl-v">duration</span> = <span class="hl-c">measureDuration</span> {</td></tr>
<tr><td class="hl-num" data-line="343"></td><td>                instanceRegistry.<span class="hl-en">createAllEagerInstances</span>()</td></tr>
<tr><td class="hl-num" data-line="344"></td><td>            }</td></tr>
<tr><td class="hl-num" data-line="345"></td><td>            logger.<span class="hl-en">debug</span>(<span class="hl-s">"eager instances created in $duration ms"</span>)</td></tr>
<tr><td class="hl-num" data-line="346"></td><td>        } <span class="hl-k">else</span> {</td></tr>
<tr><td class="hl-num" data-line="347"></td><td>            instanceRegistry.<span class="hl-en">createAllEagerInstances</span>()</td></tr>
<tr><td class="hl-num" data-line="348"></td><td>        }</td></tr>
<tr><td class="hl-num" data-line="349"></td><td>    }</td></tr>
<tr><td class="hl-num" data-line="350"></td><td>}</td></tr>
</tbody>
</table>