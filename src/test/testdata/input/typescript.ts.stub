import { Module } from '@angular/core'
import { BrowserModule } from '@angular/platform-browser'
import { FormsModule } from '@angular/forms'

export interface IContextKeyExpression {
	cmp(other: ContextKeyExpression): number;
	equals(other: ContextKeyExpression): boolean;
	substituteConstants(): ContextKeyExpression | undefined;
	serialize(): string;
	keys(): string[];
	map(mapFnc: IContextKeyExprMapper): ContextKeyExpression;
	negate(): ContextKeyExpression;
}

/** @hidden */
@Module({
    providers: [
        { provide: SettingsTabProvider, useClass: AppearanceSettingsTabProvider, multi: true },
        { provide: SettingsTabProvider, useClass: ColorSchemeSettingsTabProvider, multi: true },
    ]
})
export default class TerminalModule { } // eslint-disable-line @typescript-eslint/no-extraneous-class

@Injectable()
export class TerminalCLIHandler extends CLIHandler {
    firstMatchOnly = true
    priority = 0

    constructor (
        private app: AppService,
        private hostWindow: HostWindowService,
    ) {
        super()
    }

    async handle (event: CLIEvent): Promise<boolean> {
        const op = event.argv._[0]
        if (op === 'paste') {
            return true
        }

        return false
    }

    private handlePaste (text: string) {
        if (this.app.activeTab instanceof BaseTerminalTabComponent && this.app.activeTab.session) {
            this.app.activeTab.sendInput(text)
            this.hostWindow.bringToFront()
        }
    }
}

export * from './session'

/** A foreign function as defined by its parameter and result types */
export interface ForeignFunction<
    Parameter extends readonly NativeType[],
    NonBlocking extends boolean,
> {
    parameters: Parameter;
    /** When true, function calls will run on a dedicated blocking thread and will return a Promise resolving to the `result`. */
    nonblocking?: NonBlocking;
}

public static getAll() : readonly Codicon[] {
    return Codicon._allCodicons;
}

public static create(key: string, negated: ContextKeyExpression | null = null): ContextKeyExpression {
    const constantValue = CONSTANT_VALUES.get(key);
    if (typeof constantValue === 'boolean') {
        return (constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
    }
    return new ContextKeyNotExpr(key, negated);
}

public serialize(): string {
    throw new Error('Method not implemented.');
}
