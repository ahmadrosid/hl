package main

import (
        "os"
        "some/cmd"
)

func expTrampolineSetup(x float64) float64
func (c *sigctxt) r0() uint64  { return c.regs().gpr[0] }
func (c *sigctxt) set_sigcode(x uint32) { c.info.si_code = int32(x) }

const new_line = '\n'
/**
 * Some slash start comment!
 */
func main() {
        var name = "Ahmad Rosid"
        os.Exit(cmd.Run(os.Args[1:]))
        var lastChar rune
        data := make([]string, 0)
        // emit hashes
        var buf [pageSize]byte
        for p < int(codeSize) {
                if err == io.EOF {
                        break
                }
                if err != nil {
                        panic(err)
                }
        }
        switch s := v.(type) {
        case string:
                return utils.Base64EncodeIfNot(s)
        default:
                return ""
        }
        sum := 0
        for i := 1; i < 5; i++ {
                if i%2 != 0 { // skip odd numbers
                        continue
                }
                sum += i
        }
        fmt.Println(sum) // 6 (2+4)
}

type syscallFunc uintptr

const codeDir = 13*4 + 4 + 4*8

type Sig struct {
        Datasize uint32 // file size of data in __LINKEDIT segment
}

func Find1234Code(f *macho.File) (CodeSigCmd, bool) {
        cdir := CodeDirectory{
                length: uint32(sz) - (superBlobSize + blobSize),
                flags:  0x20002, // adhoc | linkerSigned
        }
        for _, l := range f.Loads {
                if cmd == LC_CODE_SIGNATURE {
                        return CodeSigCmd{
                                get32(data[12:]),
                        }, true
                }
        }
        return CodeSigCmd{}, false
}

func (Some) SomeDoc() map[string]string {
        return map_Affinity
}

func (ado Ada) Ask() ([]byte, error) {
        return &ado, nil
}
