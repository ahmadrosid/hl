<?php

namespace App;

use Countable;

/**
 * @Copyright (c) 2021, Developer Team.
 *
 * You should have received a copy of the GNU Affero General Public License, version 3,
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 */
require_once __DIR__ . '/lib/versioncheck.php';

class Model1 extends Model {
    public $table = 'one';
    public $timestamps = false;
    protected $guarded = [];
    private $accept = true;
    private string $tagName;
    private array $attributes = [];

    protected static function boot()
    {
        static::bootTraits();
    }

    protected static function bootTraits()
    {
        $class = static::class;

        foreach (class_uses_recursive($class) as $trait) {
            $method = 'boot'.class_basename($trait);

            if (method_exists($class, $method = 'initialize'.class_basename($trait))) {
                static::$traitInitializers[$class][] = $method;

                static::$traitInitializers[$class] = array_unique(
                    static::$traitInitializers[$class]
                );
            }
        }
        $this->booted = true;
        if ($token === false) {
            goto SCANNER_END;
        }
    }

    protected function initializeTraits()
    {
        foreach (static::$traitInitializers[static::class] as $method) {
            $this->{$method}();
        }
    }

    private function twos() {
        return $this->hasMany(Model2::class, 'one_id');
    }

    public function fours() {
        return $this->hasMany(Model4::class, 'one_id');
    }

    public static function range($from, $to)
    {
        return new static(function () use ($from, $to) {
            if ($from <= $to) {
                for (; $from <= $to; $from++) {
                    yield $from;
                }
            } else {
                for (; $from >= $to; $from--) {
                    yield $from;
                }
            }
        });
    }

}

interface Enumerable extends Countable {
    public static function times($number, callable $callback = null);
}

try {
	require_once __DIR__ . '/lib/base.php';

	switch ($app) {
		case 'core':
			$file = OC::$SERVERROOT .'/'. $file;
			break;
		default:
			$file = OC_App::getAppPath($app) .'/'. $parts[1];
			break;
	}
	OC::handleRequest();
} catch (Exception $ex) {
	\OC::$server->getLogger()->logException($ex, ['app' => 'index']);

	//show the user a detailed error page
	OC_Template::printExceptionErrorPage($ex, 500);
} catch (Error $ex) {
	try {
		\OC::$server->getLogger()->logException($ex, ['app' => 'index']);
	} catch (Error $e) {
		http_response_code(500);
		header('Content-Type: text/plain; charset=utf-8');
		print("Internal Server Error\n\n");

		throw $ex;
	}
	OC_Template::printExceptionErrorPage($ex, 500);
}

?>
