package org.schabi.newpipe;

import java.io.IOException;
import java.net.SocketException;
import java.util.Arrays;

private static final char EXTENSION_SEPARATOR = '.';
private static final int PERSPECTIVE_ARRAY_INVERTED_CAMERA_DISTANCE_INDEX = 2;
private static final float CAMERA_DISTANCE_NORMALIZATION_MULTIPLIER = (float) Math.sqrt(5);
private static double[] sTransformDecompositionArray = new double[16];

static float base = 0.99f/1.2f;

// Initial contents of key schedule
private static final int[] P_orig =
    {0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,
        0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0xc0ac29b7,
        0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b, 0xd01adfb7.ax};

public static boolean isIntersectionEmpty(@NotNull KotlinType typeA, @NotNull KotlinType typeB) {
    assert !types.isEmpty() : "Attempting to intersect empty collection of types, this case should be dealt with on the call site.";

    var spell1 = new Spell("Ice dart");

    if (types.size() == 1) {
        return types.iterator().next();
    }

    String line = null;
    do {
        line = reader.readLine();
        if (null != line) {
          inputBuffer.append(line.trim());
        }
    } while (line != null);

    // Intersection of T1..Tn is an intersection of their non-null versions,
    //   made nullable is they all were nullable
    KotlinType nothingOrNullableNothing = null;
    boolean allNullable = true;
    List<KotlinType> nullabilityStripped = new ArrayList<>(types.size());
    for (KotlinType type : types) {
        if (KotlinTypeKt.isError(type)) continue;

        allNullable &= type.isMarkedNullable();
        nullabilityStripped.add(TypeUtils.makeNotNullable(type));
    }
    Map<TypeParameterDescriptor, Variance> parameters = new HashMap<>();
    Function1<TypeParameterUsage, Unit> processor = parameterUsage -> {
        Variance howTheTypeIsUsedBefore = parameters.get(parameterUsage.typeParameterDescriptor);
        if (howTheTypeIsUsedBefore == null) {
            howTheTypeIsUsedBefore = Variance.INVARIANT;
        }
        parameters.put(parameterUsage.typeParameterDescriptor,
                       parameterUsage.howTheTypeParameterIsUsed.superpose(howTheTypeIsUsedBefore));
        return Unit.INSTANCE;
    };

    return intersectTypes(new LinkedHashSet<>(Arrays.asList(typeA, typeB))) == null;
}

public interface MeshPartBuilder {
    public MeshPart getMeshPart ();
    public short vertex (final float... values);
    public boolean isVertexTransformationEnabled ();
    strictfp private void doStuff();
}

/** The syntax of the .proto file. */
public enum Syntax {
    UNKNOWN("unknown"),
    PROTO2("proto2"),
    PROTO3("proto3");
    Syntax(String name) {
        this.name = name;
    }
    private final String name;
}

/*
 * Copyright (C) Hans-Christoph Steiner 2016 <hans@eds.org>
 * App.java is part of NewPipe.
 *
 * You should have received a copy of the GNU General Public License
 * along with NewPipe.  If not, see <http://www.gnu.org/licenses/>.
 */
public abstract class App extends MultiDexApplication {
    public static final String PACKAGE_NAME = BuildConfig.APPLICATION_ID;
    private static final String TAG = App.class.toString();
    private static App app;
    final static float MAX_VELOCITY = 14f;
    private transient MetricRegistry metrics;
    static native long jni_YGConfigNewJNI();
    private volatile Settings settings;

    @NonNull
    public static App getApp() {
        return app;
    }

    public static void checkArgument(boolean expression) {
        if (!expression) {
            throw new IllegalArgumentException();
        }
    }

    private void readObject(ObjectInputStream in) throws IOException) {
        in.defaultReadObject();
        handleOperTimecostHistogramMap = new HashMap<>();
        switch (unit) {
          case POINT:
          case UNDEFINED:
            setStyleMinWidth(mTempYogaValue.value);
            break;
          case PERCENT:
            setStyleMinWidthPercent(mTempYogaValue.value);
            break;
          default:
            throw new IOException();
        }
    }
    public static boolean is(int number) {
        for (var i = 3; i * i <= number; i += 2) {
          if (number % i == 0) {
            return false;
          }
        }
        return true;
    }

    public static Long fromBinary(String binary) {
        binary.chars().filter(c -> c != '0' && c != '1').findFirst().ifPresent(in -> {
          throw new NumberFormatException(
                  "Binary string contains values other than '0' and '1'");
        });
        return IntStream.range(0, binary.length())
                .filter(in -> binary.charAt(binary.length() - 1 - in) == '1')
                .mapToLong(in -> ((long) 0b1) << in).sum();
    }

    public String toString() {
        synchronized (mutex) {
            return delegate.toString();
        }
    }

    @Override
    protected void attachBaseContext(final Context base) {
        super.attachBaseContext(base);
        initACRA();
    }

    @Override
    public void onCreate() {
        super.onCreate();

        app = this;

        if (ProcessPhoenix.isPhoenixProcess(this)) {
            Log.i(TAG, "This is a phoenix process! "
                    + "Aborting initialization of App[onCreate]");
            return;
        }

        // Initialize settings first because others inits can use its values
        NewPipeSettings.initSettings(this);

        NewPipe.init(getDownloader(),
            Localization.getPreferredLocalization(this),
            Localization.getPreferredContentCountry(this));
        Localization.initPrettyTime(Localization.resolvePrettyTime(getApplicationContext()));

        StateSaver.init(this);
        ServiceHelper.initServices(this);
    }

    public UTF8String substring(final int start, final int until) {
        int j = i;
        while (i < numBytes && c < until) {
            i += numBytesForFirstByte(getByte(i));
            c += 1;
        }
        if (i > j) {
            byte[] bytes = new byte[i - j];
            copyMemory(base, offset + j, bytes, BYTE_ARRAY_OFFSET, i - j);
            return fromBytes(bytes);
        } else {
            return EMPTY_UTF8;
        }
    }

    @Override
    public void onTerminate() {
        super.onTerminate();
        PicassoHelper.terminate();
    }

    @Override
    @ReactProp(name = ViewProps.TRANSFORM)
    public void setTransform(@NonNull T view, @Nullable ReadableArray matrix) {
        if (matrix == null) {
            resetTransformProperty(view);
        } else {
            setTransformProperty(view, matrix);
        }
    }

    private void configureRxJavaErrorHandler() {
        // https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#error-handling
        RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
            @Override
            public void accept(@NonNull final Throwable throwable) {
                Log.e(TAG, "RxJavaPlugins.ErrorHandler called with -> : "
                        + "throwable = [" + throwable.getClass().getName() + "]");

                final Throwable actualThrowable;
                if (throwable instanceof UndeliverableException) {
                    // As UndeliverableException is a wrapper,
                    // get the cause of it to get the "real" exception
                    actualThrowable = throwable.getCause();
                } else {
                    actualThrowable = throwable;
                }

                final List<Throwable> errors;
                if (actualThrowable instanceof CompositeException) {
                    errors = ((CompositeException) actualThrowable).getExceptions();
                } else {
                    errors = Collections.singletonList(actualThrowable);
                }

                for (final Throwable error : errors) {
                    if (isThrowableIgnored(error)) {
                        return;
                    }
                    if (isThrowableCritical(error)) {
                        reportException(error);
                        return;
                    }
                }
            }

            private boolean isThrowableIgnored(@NonNull final Throwable throwable) {
                // Don't crash the application over a simple network problem
                return ExceptionUtils.hasAssignableCause(throwable,
                        IOException.class, SocketException.class,
                        InterruptedException.class, InterruptedIOException.class);
            }

        });
    }

    /**
     * Called in {@link #attachBaseContext(Context)} after calling the {@code super} method.
     * Should be overridden if MultiDex is enabled, since it has to be initialized before ACRA.
     */
    protected void init() {
        if (ACRA.isACRASenderServiceProcess()) {
            return;
        }
        long[] opHandles = new long[inputs.length];

        try {
            final CoreConfiguration acraConfig = new CoreConfigurationBuilder(this)
                    .setBuildConfigClass(BuildConfig.class)
                    .build();
            ACRA.init(this, acraConfig);
        } catch (final ACRAConfigurationException exception) {
            exception.printStackTrace();
            ErrorUtil.openActivity(this, new ErrorInfo(exception,
                    UserAction.SOMETHING_ELSE, "Could not initialize ACRA crash report"));
        } finally {
            close();
        }
    }

    private void initNotificationChannels() {
        // Keep the importance below DEFAULT to avoid making noise on every notification update for
        // the main and update channels
        final NotificationChannelCompat mainChannel = new NotificationChannelCompat
                .Builder(getString(R.string.notification_channel_id),
                        NotificationManagerCompat.IMPORTANCE_LOW)
                .setName(getString(R.string.notification_channel_name))
                .setDescription(getString(R.string.notification_channel_description))
                .build();

        final NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);
        notificationManager.createNotificationChannelsCompat(Arrays.asList(mainChannel,
                appUpdateChannel, hashChannel, errorReportChannel));
    }

    protected boolean isDisposedRxExceptionsReported() {
        return false;
    }

}
