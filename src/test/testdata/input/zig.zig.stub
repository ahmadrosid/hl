const std = @import("std");

const Seat = @import("Seat.zig");

pub const Direction = enum {
    next,
    previous,
};

const Mode = union(enum) {
    passthrough: void,
    down: struct {
        // Initial cursor position in layout coordinates
        lx: f64,
        ly: f64,
        // Initial cursor position in surface-local coordinates
        sx: f64,
        sy: f64,
    },
};

const Image = enum {
    /// The current image of the cursor is unknown, perhaps because it was set by a client.
    unknown,
    left_ptr,
    move,
    @"se-resize",
};

pub const PhysicalDirection = enum {
    up,
    down,
    left,
    right,
};

const hello_world_in_c =
    \\#include <stdio.h>
    \\
    \\int main(int argc, char **argv) {
    \\    printf("hello world\n");
    \\    return 0;
    \\}
;

// zig fmt: off
const command_impls = std.ComptimeStringMap(
    fn (std.mem.Allocator, *Seat, []const [:0]const u8, *?[]const u8) Error!void,
    .{
        .{ "attach-mode",               @import("command/attach_mode.zig").attachMode },
        .{ "background-color",          @import("command/config.zig").backgroundColor },
        .{ "border-color-focused",      @import("command/config.zig").borderColorFocused },
        .{ "border-color-unfocused",    @import("command/config.zig").borderColorUnfocused },
        .{ "border-color-urgent",       @import("command/config.zig").borderColorUrgent },
        .{ "border-width",              @import("command/config.zig").borderWidth },
        .{ "close",                     @import("command/close.zig").close },
    },
);
// zig fmt: on

pub const Error = error {
    NoCommand,
    UnknownCommand,
    NotEnoughArguments,
    TooManyArguments,
    Overflow,
    InvalidButton,
    InvalidCharacter,
    InvalidDirection,
    InvalidPhysicalDirection,
    InvalidOrientation,
    InvalidRgba,
    InvalidValue,
    UnknownOption,
    ConflictingOptions,
    OutOfMemory,
    Other,
};

/// Run a command for the given Seat. The `args` parameter is similar to the
/// classic argv in that the command to be run is passed as the first argument.
/// The optional slice passed as the out parameter must initially be set to
/// null. If the command produces output or Error.Other is returned, the slice
/// will be set to the output of the command or a failure message, respectively.
/// The caller is then responsible for freeing that slice, which will be
/// allocated using the provided allocator.
pub fn run(
    allocator: std.mem.Allocator,
    seat: *Seat,
    args: []const [:0]const u8,
    out: *?[]const u8,
) Error!void {
    std.debug.assert(out.* == null);
    if (args.len == 0) return Error.NoCommand;
    const impl_fn = command_impls.get(args[0]) orelse return Error.UnknownCommand;
    try impl_fn(allocator, seat, args, out);
}

/// Return a short error message for the given error. Passing Error.Other is UB
pub fn errToMsg(err: Error) [:0]const u8 {
    return switch (err) {
        Error.NoCommand => "no command given",
        Error.UnknownCommand => "unknown command",
        Error.UnknownOption => "unknown option",
        Error.ConflictingOptions => "options conflict",
        Error.NotEnoughArguments => "not enough arguments",
        Error.TooManyArguments => "too many arguments",
        Error.Overflow => "value out of bounds",
        Error.InvalidButton => "invalid button",
        Error.InvalidCharacter => "invalid character in argument",
        Error.InvalidDirection => "invalid direction. Must be 'next' or 'previous'",
        Error.InvalidPhysicalDirection => "invalid direction. Must be 'up', 'down', 'left' or 'right'",
        Error.InvalidOrientation => "invalid orientation. Must be 'horizontal', or 'vertical'",
        Error.InvalidRgba => "invalid color format, must be hexadecimal 0xRRGGBB or 0xRRGGBBAA",
        Error.InvalidValue => "invalid value",
        Error.OutOfMemory => "out of memory",
        Error.Other => unreachable,
    };
}
