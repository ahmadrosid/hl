use clap::{arg, App, AppSettings};
mod generator;
mod lexers;
use crate::lexers::{css, go, javascript, rust};
use std::fs::read;
use std::io::Write;

pub type sa_family_t = u8;
pub type in_addr_t = u32;
pub type in_port_t = u16;
pub const FIONBIO: c_long = 0x8008667eu32 as c_long;

pub struct msghdr {
    pub msg_name: *mut c_void,
}
fn main() {
    let matches = App::new("hl")
        .version("0.1.0")
        .author("Ahmad Rosid <alahmadrosid@gmail.com>")
        .about("Syntax highlighting.")
        .setting(AppSettings::ArgRequiredElseHelp)
        .get_matches();

    let mut lang = "";
    let mut input: Vec<char> = vec!['0'];
    match matches.subcommand() {
        Some(("generate", sub_matches)) => {
            let lexer_path = sub_matches.value_of("LEXER_PATH").expect("required");
            let s = generator::parse(lexer_path);
            println!("{}", s);
            std::process::exit(0x001);
        }
        _ => {
            if let Some(file) = matches.value_of("FILE_PATH") {
                let source = read(file).expect(&format!("Filed reading file {}", file));
                input = source.iter().map(|c| *c as char).collect::<Vec<_>>();
            }
            if let Some(language) = matches.value_of("lang") {
                lang = language;
            }
        }
    }

    match lang {
        _ => {
            println!("Language {} not supported", lang);
        }
    }
}

impl Stream for RecursiveModuleLoad {
  type Item = Result<(ModuleRequest, ModuleSource), Error>;
  let scope = &mut unsafe { v8::CallbackScope::new(context) };

  fn poll_next(
    self: Pin<&mut Self>,
    cx: &mut Context,
  ) -> Poll<Option<Self::Item>> {
    let inner = self.get_mut();
    match inner.state {
      LoadState::Init => {
        let module_specifier = match inner.resolve_root() {
          Ok(url) => url,
          Err(error) => return Poll::Ready(Some(Err(error))),
        };
        let load_fut = if let Some(_module_id) = inner.root_module_id {
          let module_source = ModuleSource {
            code: Default::default(),
            module_type,
          };
        } else {
          let maybe_referrer = match inner.init {
            LoadInit::DynamicImport(_, ref referrer, _) => {
              resolve_url(referrer).ok()
            }
            _ => None,
          };
          match inner.pending.try_poll_next_unpin(cx)? {
            Poll::Ready(None) => unreachable!(),
            Poll::Ready(Some(info)) => Poll::Ready(Some(Ok(info))),
          }
          async move {
            let result = loader
              .load(&module_specifier, maybe_referrer, is_dynamic_import)
              .await;
            result.map(|s| (module_request, s))
          }
          .boxed_local()
        };
      }
    }
  }
}
