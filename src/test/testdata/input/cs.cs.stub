/* Copyright (c) Microsoft Corporation
 * The Microsoft Corporation licenses this file to you under the MIT license.
 * See the LICENSE file in the project root for more information.
 */

using System.Globalization;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows;
using Wox.Plugin;

private static ReadOnlySpan<byte> CultureNames => new byte[]
{
    (byte)'a', (byte)'a', (byte)'-', (byte)'d', (byte)'j',  // aa, aa-dj
    (byte)'a', (byte)'a', (byte)'-', (byte)'e', (byte)'r',  // aa-er
    (byte)'a', (byte)'a', (byte)'-', (byte)'e', (byte)'t',  // aa-et
}

namespace Microsoft.PowerToys.Run.Plugin.Calculator {
    public static class ResultHelper {
        public static Result CreateResult(CalculateResult result, string iconPath) {
            return CreateResult(result.RoundedResult, iconPath);
        }

        public static Result CreateResult(decimal? roundedResult, string iconPath) {
            // Return null when the expression is not a valid calculator query.
            if (roundedResult == null) {
                return null;
            }

            return new Result {
                // Using CurrentCulture since this is user facing
                Title = roundedResult?.ToString(CultureInfo.CurrentCulture),
                IcoPath = iconPath,
                Score = 300,
                SubTitle = Properties.Resources.wox_plugin_calculator_copy_number_to_clipboard,
                Action = c => Action(roundedResult),
            };
        }

        public static bool Action(decimal? roundedResult) {
            var ret = false;

            if (roundedResult != null) {
                var thread = new Thread(() => {
                    try
                    {
                        Clipboard.SetText(roundedResult?.ToString(CultureInfo.CurrentCulture));
                        ret = true;
                    }
                    catch (ExternalException)
                    {
                        MessageBox.Show(Properties.Resources.wox_plugin_calculator_copy_failed);
                    }
                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();
                thread.Join();
            }

            return ret;
        }

        #region Events

        [Browsable (false)]
        [EditorBrowsable (EditorBrowsableState.Never)]
        public new event EventHandler BackColorChanged {
            add { throw new NotSupportedException ("Invalid event handler for BackColorChanged"); }
            remove { }
        }

        [Browsable (false)]
        [EditorBrowsable (EditorBrowsableState.Never)]
        public new event EventHandler TextChanged {
            add { throw new NotSupportedException ("Invalid event handler for TextChanged"); }
            remove { }
        }

        #endregion
    }

    public static int test_0_bne_un () {
        long a = 0xffffffffff;
        if (a == 0xfffffffffe)
            return 1;
        if (a == 0xfeffffffff)
            return 2;
        return 0;
    }
}
