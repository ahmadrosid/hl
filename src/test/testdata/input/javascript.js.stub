// No Copyright!

const obj = {
    name: 'Ahmad Rosid',
    job: "Open source Developer",
    age: 27
}

/**
 * Slash start comment!
 */
const values = [true,false,null,void 0,0,0.0,-0,"",-1,-1.25,1,1.25,-2147483648,2147483648,Infinity,-Infinity,NaN];
var expected = [
  [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN],
  [1,0,0,NaN,0,0,0,0,0,0,1,1.25,0,2147483648,Infinity,0,NaN],
];
let func = (function max(a,b) { return Math.max(a, b); });
var left_funcs = [
  (function max_L3(b) { return Math.max(void 0, b); }),
  (function max_L12(b) { return Math.max(-2147483648, b); }),
  (function max_L13(b) { return Math.max(2147483648, b); }),
  (function max_L14(b) { return Math.max(Infinity, b); }),
  (function max_L15(b) { return Math.max(-Infinity, b); }),
  (function max_L16(b) { return Math.max(NaN, b); })
];
var right_funcs = [
  (function max_R5(a) { return Math.max(a, '0.0'); }),
  (function max_R6(a) { return Math.max(a, -0); }),
  (function max_R7(a) { return Math.max(a, ""); }),
  (function max_R12(a) { return Math.max(a, -2147483648); }),
  (function max_R13(a) { return Math.max(a, 2147483648); }),
  (function max_R14(a) { return Math.max(a, Infinity); }),
  (function max_R15(a) { return Math.max(a, -Infinity); }),
  (function max_R16(a) { return Math.max(a, NaN); })
];
function test() {
  for (var i = 0; i < values.length; i++) {
    for (var j = 0; j < values.length; j++) {
      var a = values[i];
      var b = values[j];
      var x = expected[i][j];
      assertEquals(x, func(a,b));
      assertEquals(x, left_funcs[i](b));
      assertEquals(x, right_funcs[j](a));
    }
  }

  var result = matrix();
  for (var i = 0; i < values.length; i++) {
    for (var j = 0; j < values.length; j++) {
      assertEquals(expected[i][j], result[i][j]);
    }
  }
}
test();

function mapSpecialUnicodeValues(code) {
  if (code >= 0xfff0 && code <= 0xffff) {
    // Specials unicode block.
    return 0;
  } else if (code >= 0xf600 && code <= 0xf8ff) {
    return getSpecialPUASymbols()[code] || code;
  } else if (code === /* softhyphen = */ 0x00ad) {
    return 0x002d; // hyphen
  }
  return code;
}
