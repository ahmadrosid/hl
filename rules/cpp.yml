multi_line_comment: "/*,*/"

constant:
  TRUE: "true"
  FALSE: "false"
  THIS: "this"
  NULLPTR: "nullptr"
  NULL: "NULL"
  SizeT: "size_t"
  int64_t: "int64_t"
  uint32_t: "uint32_t"

single_constant:
  - "<"
  - ">"

entity_suffix:
  left_brace: "("

keyword:
  asm: "asm"
  auto: "auto"
  bool: "bool"
  break: "break"
  const: "const"
  class: "class"
  char: "char"
  catch: "catch"
  constexpr: "constexpr"
  continue: "continue"
  default: "default"
  define: "define"
  delete: "delete"
  do: "do"
  double: "double"
  else: "else"
  enum: "enum"
  extern: "extern"
  explicit: "explicit"
  float: "float"
  final: "final"
  friend: "friend"
  for: "for"
  if: "if"
  inline: "inline"
  int: "int"
  long: "long"
  namespace: "namespace"
  new: "new"
  noexcept: "noexcept"
  return: "return"
  override: "override"
  operator: "operator"
  include: "include"
  endif: "endif"
  public: "public"
  private: "private"
  protected: "protected"
  pragma: "pragma"
  short: "short"
  signed: "signed"
  sizeof: "sizeof"
  static: "static"
  static_cast: "static_cast"
  struct: "struct"
  switch: "switch"
  template: "template"
  typedef: "typedef"
  typename: "typename"
  try: "try"
  throw: "throw"
  using: "using"
  union: "union"
  unsigned: "unsigned"
  void: "void"
  virtual: "virtual"
  volatile: "volatile"
  while: "while"

condition:
  ACCEPT_ESCAPED_STRING: true
  ACCEPT_STRING_ONE_QUOTE: true
  ACCEPT_STRING_DOUBLE_QUOTE: true
  ACCEPT_ENTITY_TAG_SUFFIX: "self.ch.is_numeric()"
  BREAK_ENTITY_TAG_SUFFIX: "!self.ch.is_numeric() && !is_letter(self.ch)"
  ACCEPT_HEXADECIMAL_NUMBER: true
  PREFIX_ONE_LINE_COMMENT: "//"