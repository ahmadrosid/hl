slash_comment: true
slash_star_comment: true

constant:
  TRUE: "true"
  FALSE: "false"
  NULL: "null"
  this: this

entity_suffix:
  left_brace: "("

keyword:
  abstract: "abstract"
  as: "as"
  async: "async"
  await: "await"
  base: "base"
  bool: "bool"
  break: "break"
  byte: "byte"
  case: "case"
  catch: "catch"
  char: "char"
  checked: "checked"
  class: "class"
  const: "const"
  continue: "continue"
  decimal: "decimal"
  default: "default"
  delegate: "delegate"
  do: "do"
  double: "double"
  else: "else"
  enum: "enum"
  event: "event"
  explicit: "explicit"
  extern: "extern"
  finally: "finally"
  fixed: "fixed"
  float: "float"
  for: "for"
  foreach: "foreach"
  goto: "goto"
  if: "if"
  implicit: "implicit"
  in: "in"
  int: "int"
  interface: "interface"
  internal: "internal"
  is: "is"
  lock: "lock"
  long: "long"
  namespace: "namespace"
  new: "new"
  object: "object"
  operator: "operator"
  out: "out"
  override: "override"
  params: "params"
  private: "private"
  protected: "protected"
  public: "public"
  readonly: "readonly"
  ref: "ref"
  return: "return"
  sbyte: "sbyte"
  sealed: "sealed"
  short: "short"
  sizeof: "sizeof"
  stackalloc: "stackalloc"
  static: "static"
  string: "string"
  struct: "struct"
  switch: "switch"
  throw: "throw"
  try: "try"
  typeof: "typeof"
  uint: "uint"
  ulong: "ulong"
  unchecked: "unchecked"
  unsafe: "unsafe"
  ushort: "ushort"
  using: "using"
  virtual: "virtual"
  var: "var"
  void: "void"
  volatile: "volatile"
  while: "while"
  yield: "yield"
  add: "add"
  remove: "remove"
  region: "region"
  endregion: "endregion"
  where: where
  get: get
  set: set
  global: global

single_keyword:
  - "="

double_keyword:
  comparison:
    first: "="
    last: "="
  double_arrow:
    first: "="
    last: ">"
  logical_and:
    first: "&"
    last: "&"
  nullish_coalescing_operator:
    first: "?"
    last: "?"
  inequality:
    first: "!"
    last: "="

condition:
  ACCEPT_ESCAPED_STRING: true
  ACCEPT_STRING_ONE_QUOTE: true
  ACCEPT_STRING_DOUBLE_QUOTE: true
  ACCEPT_ENTITY_TAG_SUFFIX: "is_digit(self.ch)"
  BREAK_ENTITY_TAG_SUFFIX: "!is_digit(self.ch) && !is_letter(self.ch)"
  ACCEPT_HEXADECIMAL_NUMBER: true
