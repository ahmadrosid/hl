multi_line_comment: "/*,*/"
constant: "null,true,false,this,Any,Array,Boolean,Double,Long,Int,String,Short,Lazy,List"
var_suffix:
  colon: ":"
  equal: "="
constant_prefix:
  lt: "<"
constant_suffix:
  right_paren: )
  left_brace: "{"
  comma: ","
  gt: ">"
  option: "?"
entity_suffix:
  left_paren: (
condition:
  ACCEPT_ESCAPED_STRING: true
  ACCEPT_STRING_ONE_QUOTE: true
  ACCEPT_STRING_DOUBLE_QUOTE: true
  RENDER_MULTI_LINE_STRING: true
  PREFIX_ONE_LINE_COMMENT: //
  ACCEPT_ENTITY_TAG_SUFFIX: self.ch.is_numeric()
  BREAK_ENTITY_TAG_SUFFIX: "!self.ch.is_numeric() && !is_letter(self.ch)"
  ENCODE_LT: "<"
  ENCODE_LT_STRING: "&lt;"
  ACCEPT_PREFIX_KEYWORD: "@"
keyword: "as,abstract,break,class,continue,companion,data,do,else,enum,external,expect,for,fun,if,in,internal,import,interface,inline,is,noinline,object,open,operator,override,package,public,private,return,super,set,get,throw,try,typealias,typeof,val,var,when,while"