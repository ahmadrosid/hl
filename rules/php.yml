slash_comment: true
slash_star_comment: true

constant:
  THIS: 'this'
  TRUE: 'true'
  FALSE: 'false'
  NULL: 'null'
  CSTRING: 'String'

entity_prefix:
  ENTITY_DOT: '>'

entity_suffix:
  ENTITY_LBRACE: '('

keyword:
  abstract: "abstract"
  as: "as"
  break: "break"
  and: "and"
  callable: "callable"
  case: "case"
  catch: "catch"
  clone: "clone"
  const: "const"
  continue: "continue"
  declare: "declare"
  do: "do"
  echo: "echo"
  else: "else"
  enddeclare: "enddeclare"
  endfor: "endfor"
  endforeach: "endforeach"
  endswitch: "endswitch"
  endwhile: "endwhile"
  eval: "eval"
  finally: "finally"
  for: "for"
  foreach: "foreach"
  global: "global"
  goto: "goto"
  if: "if"
  implements: "implements"
  include_once: "include_once"
  instanceof: "instanceof"
  insteadof: "insteadof"
  interface: "interface"
  namespace: "namespace"
  new: "new"
  or: "or"
  private: "private"
  protected: "protected"
  public: "public"
  require: "require"
  require_once: "require_once"
  return: "return"
  static: "static"
  switch: "switch"
  throw: "throw"
  try: "try"
  use: "use"
  var: "var"
  class: "class"
  default: "default"
  elseif: "elseif"
  endif: "endif"
  extends: "extends"
  function: "function"
  include: "include"
  print: "print"
  trait: "trait"
  while: "while"
  xor: "xor"
  yield: "yield"

condition:
  ACCEPT_STRING_ONE_QUOTE: true
  ACCEPT_STRING_DOUBLE_QUOTE: true
  ACCEPT_PREFIX_DIGIT: true
  PREFIX_DIGIT_CHAR: 'f'
  ACCEPT_ENTITY_TAG_SUFFIX: "is_digit(self.ch)"
  BREAK_ENTITY_TAG_SUFFIX: "!is_digit(self.ch) && !is_letter(self.ch)"
  ACCEPT_ENTITY_TAG_PREFIX: "<"
  ENTITY_TAG_PREFIX_CHAR: "?"