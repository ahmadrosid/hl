multi_line_comment: "/*,*/"
multi_line_string: "`,`"

constant:
  TRUE: 'true'
  FALSE: 'false'
  UNDEFINED: 'undefined'
  NULL: 'null'

var:
  VINFINITY: 'Infinity'
  VNAN: 'NaN'
  MATH: 'Math'
  DATE: 'Date'

entity_prefix:
  ENTITY_DOT: '.'

entity_suffix:
  left_brace: "("
  colon: ':'

keyword:
  async: async
  await: await
  break: break
  case: case
  catch: catch
  class: class
  const: const
  continue: continue
  debugger: debugger
  default: default
  delete: delete
  do: do
  else: else
  enum: enum
  export: export
  extends: extends
  finally: finally
  for: for
  function: function
  if: if
  implements: implements
  import: import
  in: in
  instanceof: instanceof
  interface: interface
  let: let
  new: new
  package: package
  private: private
  protected: protected
  public: public
  return: return
  super: super
  switch: switch
  static: static
  this: this
  throw: throw
  try: try
  typeof: typeof
  var: var
  void: void
  while: while
  with: with
  yield: yield

condition:
  ACCEPT_ESCAPED_STRING: true
  ACCEPT_STRING_ONE_QUOTE: true
  ACCEPT_STRING_DOUBLE_QUOTE: true
  RENDER_MULTI_LINE_STRING: true
  ACCEPT_ENTITY_SUFFIX: "self.ch.is_numeric()"
  BREAK_ENTITY_SUFFIX: "self.ch == ' ' || self.ch == ':' || self.ch == ':' || self.ch == '(' || self.ch == '{' || self.ch == '\\n'"
  ACCEPT_HEXADECIMAL_NUMBER: true
  PREFIX_ONE_LINE_COMMENT: "//"
